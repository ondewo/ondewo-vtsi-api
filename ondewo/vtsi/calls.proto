// Copyright 2021 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.vtsi;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
//import "google/rpc/status.proto";
import "ondewo/nlu/context.proto";
import "ondewo/nlu/intent.proto";
import "ondewo/s2t/speech-to-text.proto";
import "ondewo/t2s/text-to-speech.proto";
import "ondewo/sip/sip.proto";


// ONDEWO VTSI API
service Calls {

    //////////////////////////////////////////////////////////////////////////////
    // Caller and Listener endpoints
    //////////////////////////////////////////////////////////////////////////////

    // start single caller instance for a specific nlu-project.
    rpc StartCaller (StartCallerRequest) returns (StartCallerResponse);

    // start multiple ondewo-sip callers instances for a specific nlu-project.
    rpc StartCallers (StartCallersRequest) returns (StartCallersResponse);

    // lists all available callers
    rpc ListCallers (ListCallersRequest) returns (ListCallersResponse);

    // gets a caller
    rpc GetCaller (GetCallerRequest) returns (Caller);

    // deletes a caller
    rpc DeleteCaller (DeleteCallerRequest) returns (DeleteCallerResponse);

    // deletes multiple callers
    rpc DeleteCallers (DeleteCallersRequest) returns (DeleteCallersResponse);

    // start single listener instance for a specific nlu-project.
    rpc StartListener (StartListenerRequest) returns (StartListenerResponse);

    // start multiple ondewo-sip listeners instances for a specific nlu-project.
    rpc StartListeners (StartListenersRequest) returns (StartListenersResponse);

    // lists all available listeners
    rpc ListListeners (ListListenersRequest) returns (ListListenersResponse);

    // gets a listener
    rpc GetListener (GetListenerRequest) returns (Listener);

    // deletes a listener
    rpc DeleteListener (DeleteListenerRequest) returns (DeleteListenerResponse);

    // deletes multiple listeners
    rpc DeleteListeners (DeleteListenersRequest) returns (DeleteListenersResponse);

    // start multiple ondewo-sip callers instances with schedules
    rpc StartScheduledCaller (StartScheduledCallerRequest) returns (StartScheduledCallerResponse);

    // start multiple ondewo-sip callers instances with schedules
    rpc StartScheduledCallers (StartScheduledCallersRequest) returns (StartScheduledCallersResponse);

    // stop/kill a ondewo-sip listener or caller instance for a specific vtsi-project.
    rpc StopCall (StopCallRequest) returns (StopCallResponse);

    // stop/kill a list of ondewo-sip listener or caller instances for a specific vtsi-project.
    // "stops both Listener and Caller calls"
    rpc StopCalls (StopCallsRequest) returns (StopCallsResponse);

    // stop/kill all ondewo-sip listener or caller instance for a specific nlu-project.
    // "stops all Listener and Caller calls"
    rpc StopAllCalls (StopAllCallsRequest) returns (StopCallsResponse);

    // Transfer a call from a listener to another
    rpc TransferCall (TransferCallRequest) returns (TransferCallResponse);

    // Transfer a call from a listener to another
    rpc TransferCalls (TransferCallsRequest) returns (TransferCallsResponse);

    // get call log for single call instance
    rpc GetCall (GetCallRequest) returns (Call);

    // get call log for all call instances
    rpc ListCalls (ListCallsRequest) returns (ListCallsResponse);

}

// base configuration of services (ondewo-nlu, text-to-speech, speech-to-text, asterisk)
message BaseServiceConfig{

    // service host IP
    string host = 1;

    // service port
    int32 port = 2;

    // Optional: GRPC cert for the given service
    string grpc_cert = 3;
}

// Credentials
message Credentials {

    // Account name - usually email address
    string account_name = 1;

    // password of the account
    string password = 2;
}

// NLU Configuration
message NluVtsiConfig{

    // Base config
    // Host, Port, and [Optional] GRPC cert
    BaseServiceConfig nlu_base_config = 1;

    // authentication information (login information)
    oneof authentication {

        // Credentials with classical username and password
        Credentials credentials = 2;

        // Authentication token
        string auth_token = 3;
    }

    // the resource name of the agent. Format: `projects/<uuid>/agent`
    string agent_name = 4;

    // language code in a two letter iso code, e.g. de, en, etc.
    string language_code = 5;

    // name of intent to trigger at the start of a call
    string initial_intent = 6;

    // ondewo-nlu list of contexts
    repeated ondewo.nlu.Context contexts = 7;

    // http basic auth token
    string http_basic_auth_token = 8;
}

// Text-2-Speech Configuration
message T2sVtsiConfig{

    // Host, Port, and [Optional] GRPC cert
    BaseServiceConfig t2s_base_config = 1;

    // Configuration of Text-2-Speech
    ondewo.t2s.RequestConfig t2s_request_config = 2;
}

// Speech-2-Text Configuration
message S2tVtsiConfig{

    // Host, Port, and [Optional] GRPC cert
    BaseServiceConfig s2t_base_config = 1;

    // Configuration of Speech-2-Text
    ondewo.s2t.TranscribeRequestConfig s2t_transcribe_request_config = 2;
}

// Asterisk configuration
message AsteriskConfig{

    // Host, Port, and [Optional] GRPC cert
    BaseServiceConfig asterisk_base_config = 1;
}

// Service Configs of Speech-2-Text, NLU, Text-2-Speech and CSI
// which are common for both listener and caller
message CommonServicesConfig{

    // speech-to-text service configuration
    S2tVtsiConfig s2t_vtsi_config = 1;

    // ondewo-nlu configuration
    NluVtsiConfig nlu_vtsi_config = 2;

    // text-to-speech service configuration
    T2sVtsiConfig t2s_vtsi_config = 3;

    // CSI service configuration
    CsiVtsiConfig csi_vtsi_config = 4;

}

// The base config is for both the listener and caller .. If you only provide it you will get a listener
// You will need to provide <code>SipCallerConfig</code> for the caller
message SipBaseConfig{

    // version of sip to use for call, semantic versioning e.g., 1.0.0, 1.1.0-pre-release, etc.
    string sip_sim_version = 1;

}

// Configuration of the SIP caller
message SipCallerConfig{

    // SIP configuration
    SipBaseConfig sip_base_config = 1;

    // callee id e.g. phone number to call, +4365012345678 or VOIP phone ondewo0001@ondewo.com, etc.
    string callee_id = 2;

    // dictionary of sip headers that are sent on call
    map<string, string> sip_headers = 3;

}


// CSI configuration
message CsiVtsiConfig{

    // Callback for the Speech-2-Text platform
    S2tVtsiCallbacks s2t_vtsi_callbacks = 1;

    // Callback for the NLU platform
    NluVtsiCallbacks nlu_vtsi_callbacks = 2;

    // Callback for the Text-2-Speech platform
    T2sVtsiCallbacks t2s_vtsi_callbacks = 3;

    // Configuration of the Minio Audio Object Store
    AudioObjectStorageConfig audio_object_store_config = 4;

    // Configuration of the RabbitMQ Message Broker
    MessageBrokerConfig message_broker_config = 5;

    // Setting to activate if it is possible to send control messages
    // a.) via RabbitMQ to remote control the system
    // b.) via embeddings in NLU text responses
    bool activate_control_messages = 6;

}

// Minio Audio Object Store
message AudioObjectStorageConfig{

    // Audio storage should be activated or not
    bool activate_audio_object_storage = 1;

    // Configuration of the Minio Audio Object Store
    AudioObjectStorageServicesActivationConfig audio_object_storage_services_activation_config = 2;

}

// Configuration of the Minio Audio Object Store
message AudioObjectStorageServicesActivationConfig{

    // Should audio object store save audio sent to the Speech-2-Text platform
    bool activate_s2t = 1;

    // Should audio object store save audio generated from the Text-2-Speech platform
    bool activate_t2s = 2;
}

// Configuration of the RabbitMQ Message Broker
message MessageBrokerConfig{

    // Should the broker be activated or not
    bool activate_message_broker = 1;

    // Configuration of the RabbitMQ Message Broker
    MessageBrokerServicesActivationConfig message_broker_services_activation_config = 2;

    // Configuration of the RabbitMQ Message Broker
    oneof message_broker_config{
        RabbitMqConfig rabbit_mq_config = 3;
    }
}

// Configuration of the RabbitMQ Message Broker
message MessageBrokerServicesActivationConfig{

    // should RabbitMQ Message Broker be activated for Speech-2-Text platform
    bool activate_s2t = 1;

    // should RabbitMQ Message Broker be activated for NLU platform
    bool activate_nlu = 2;

    // should RabbitMQ Message Broker be activated for Text-2-Speech platform
    bool activate_t2s = 3;

    // should RabbitMQ Message Broker be activated for SIP platform
    bool activate_sip = 4;
}

// Configuration of the RabbitMQ Message Broker
message RabbitMqConfig{

    // host where the rabbit mq server runs
    string host = 1;

    // port where the rabbit mq server runs
    int32 port = 2;

    // port where the rabbit mq server runs
    int32 port_2 = 3;

    // user of server
    string user = 4;

    // password of server
    string password = 5;

}


// Callback for the Speech-2-Text platform
message S2tVtsiCallbacks{

    // Callback executed before the Speech-2-Text will be called
    repeated string pre_s2t_callbacks = 1;

    // Callback executed after the Speech-2-Text has been called
    repeated string post_s2t_callbacks = 2;

}

// Callback for the NLU platform
message NluVtsiCallbacks{

    // Callback executed before the NLU will be called
    repeated string pre_nlu_callbacks = 1;

    // Callback executed after the NLU has been called
    repeated string post_nlu_callbacks = 2;

}
// Callback for the Text-2-Speech platform
message T2sVtsiCallbacks{

    // Callback executed before the Text-2-Speech will be called
    repeated string pre_t2s_callbacks = 1;

    // Callback executed after the Text-2-Speech has been called
    repeated string post_t2s_callbacks = 2;

}

message Listener {

    // VTSI project name with which to perform the call of the form
    // <code>projects/<project_uuid>/listeners/<listener_uuid></code>
    string name = 1;

    // The call name that was assigned to the call
    // <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    string call_name = 2;

    // SIP service configuration
    SipBaseConfig sip_base_config = 3;

    // Service Configs of Speech-2-Text, NLU, Text-2-Speech and CSI
    CommonServicesConfig common_services_config = 4;

}

message Caller {

    // Caller name with which to perform the call of the form
    // <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;</code></pre>
    string name = 1;

    // The call name that was assigned to the call
    // <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    string call_name = 2;

    // SIP service configuration
    SipCallerConfig sip_caller_config = 3;

    // Service Configs of Speech-2-Text, NLU, Text-2-Speech and CSI
    CommonServicesConfig common_services_config = 4;
}


// request for starting a listener
message StartListenerRequest {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // SIP service configuration
    SipBaseConfig sip_base_config = 2;

    // Service Configs of Speech-2-Text, NLU, Text-2-Speech and CSI
    CommonServicesConfig common_services_config = 3;

}

// Response to start multiple listeners
message StartListenerResponse {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    Listener listener = 2;

    // error message if you have any so if it's unhealthy
    string error_message = 3;

}

// Request to start multiple listeners
message StartListenersRequest {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // Listeners that should be started
    repeated StartListenerRequest listener_requests = 2;
}

// Response to start multiple listeners
message StartListenersResponse {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // The call ids that were assigned to each listener
    repeated StartListenerResponse listener_responses = 2;

    // overall error message if you have any so if it's unhealthy
    string error_message = 3;

}

// request for starting a caller
message StartCallerRequest {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // SIP service configuration
    SipCallerConfig sip_caller_config = 2;

    // Service Configs of Speech-2-Text, NLU, Text-2-Speech and CSI
    CommonServicesConfig common_services_config = 3;

}

// Response to start multiple listeners
message StartCallerResponse {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    Caller caller = 2;

    // error message if you have any so if it's unhealthy
    string error_message = 3;

}

// Request to start multiple callers
message StartCallersRequest {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // Callers that should be started
    repeated StartCallerRequest caller_requests = 2;

}

// Response to the start caller request
message StartCallersResponse {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // The call ids that were assigned to each listener
    repeated StartCallerResponse caller_responses = 2;

    // overall error message if you have any so if it's unhealthy
    string error_message = 3;

}


// Represents a request to list callers.
message ListCallersRequest {

    // VTSI project name for which to perform the call.
    // The format is: "projects/<project_uuid>/project".
    string vtsi_project_name = 1;

    // Optional. The next_page_token value returned from a previous list request.
    // Example: "current_index-1--page_size-20"
    optional string page_token = 2;

}

// Represents the response for listing callers.
message ListCallersResponse {

    // The list of callers.
    repeated Caller callers = 1;

}

// Represents a request to get a specific caller.
message GetCallerRequest {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // The name of caller to retrieve.
    string name = 2;

}

// Represents a request to list listeners.
message ListListenersRequest {

    // VTSI project name for which to perform the call.
    // The format is: "projects/<project_uuid>/project".
    string vtsi_project_name = 1;

    // Optional. The next_page_token value returned from a previous list request.
    // Example: "current_index-1--page_size-20"
    optional string page_token = 2;

}

// Represents the response for listing listeners.
message ListListenersResponse {

    // The list of listeners.
    repeated Listener listeners = 1;

    // Token to retrieve the next page of results.
    // This field is a string that holds a token for fetching the next page of results.
    // If there are no more results in the list, this field will be empty.
    string next_page_token = 2;
}

// Represents a request to get a specific listener.
message GetListenerRequest {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // The name of listener to retrieve.
    string name = 2;

}

// Represents a request to delete a specific listener.
message DeleteListenerRequest {

    // The name of the listener to delete in the form <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;</code></pre>
    string name = 1;

}

// Represents a request to delete a specific listener.
message DeleteListenerResponse {

    // The name of the deleted listener in the form <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;</code></pre>
    string name = 1;

    // error message if there are any.
    string error_message = 2;

}

// Represents a request to delete multiple listeners.
message DeleteListenersRequest {

    // The names of the listeners to delete in the form <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;</code></pre>
    repeated string names = 1;

}

message DeleteListenersResponse {

    // responses to delete listeners
    repeated DeleteListenerResponse delete_listener_responses = 1;

    // error message if there are any.
    string error_message = 2;

}


// Represents a request to delete a specific caller.
message DeleteCallerRequest {

    // The name of the caller to delete in the form <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;</code></pre>
    string name = 1;

}

// Represents a request to delete a specific caller.
message DeleteCallerResponse {

    // The name of the deleted caller in the form <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;</code></pre>
    string name = 1;

    // error message if there are any.
    string error_message = 2;

}

// Represents a request to delete multiple callers.
message DeleteCallersRequest {

    // The name of the caller to delete in the form <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;</code></pre>
    repeated string names = 1;

}

message DeleteCallersResponse {

    // responses to delete callers
    repeated DeleteCallerResponse delete_caller_responses = 1;

    // error message if there are any.
    string error_message = 2;

}

// request for starting a scheduled call
message StartScheduledCallerRequest {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // Normal start caller request
    StartCallerRequest request = 2;

    // Time the call is scheduled
    // TODO to be refactored with a more complex scheduling object
    google.protobuf.Timestamp scheduled_time = 3;
}


// Request to start scheduled callers
message StartScheduledCallersRequest {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // requests to start scheduled callers
    repeated StartScheduledCallerRequest scheduled_caller_requests = 2;
}

// Response to start multiple listeners
message StartScheduledCallersResponse {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // The call ids that were assigned to each listener
    repeated StartScheduledCallerResponse scheduled_caller_responses = 2;

}


// Response to start multiple listeners
message StartScheduledCallerResponse {

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    ScheduledCaller scheduled_caller = 2;

    // error message if you have any so if it's unhealthy
    string error_message = 3;

}

// ScheduledCaller message - a Caller with a schedule when to start calling
message ScheduledCaller {

    // Resource name of the scheduled caller
    // <pre><code>projects/&lt;project_uuid&gt;/scheduled_callers/&lt;scheduled_caller_uuid&gt;</code></pre>
    string name = 1;

    // The asterisk sip call name that was assigned to the call
    // For listener this is <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    // For callers this is <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    string call_name = 2;

    // SIP service configuration
    SipBaseConfig sip_config = 3;

    // Service Configs of Speech-2-Text, NLU, Text-2-Speech and CSI
    CommonServicesConfig common_services_config = 4;

    // Time the call is scheduled
    // TODO to be refactored with a more complex scheduling object
    google.protobuf.Timestamp scheduled_time = 5;
}

// Request to stop/kill a ondewo-sip listener or caller instance for a specific vtsi-project.
message StopCallRequest {

    // VTSI project parent with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // call name to stop
    // For listener this is <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    // For callers this is <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    string call_name = 2;
}

// Response to stop/kill a ondewo-sip listener or caller instance for a specific vtsi-project.
message StopCallResponse {

    // VTSI project name with which to stop the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // call name to stop
    // For listener this is <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    // For callers this is <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    string call_name = 2;

    // error messages if you have any so if it's unhealthy
    string error_message = 3;
}

// Request to stop/kill specific ondewo-sip listeners or callers instance for a specific vtsi-project.
message StopCallsRequest {

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // call names to stop
    // For listener this is <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    // For callers this is <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    repeated string call_names = 2;
}

// Response to stop/kill a ondewo-sip listener or caller instance for a specific vtsi-project.
message StopCallsResponse {

    // responses to stop/kill a ondewo-sip listener or caller instance for a specific vtsi-project.
    repeated StopCallResponse stop_call_responses = 1;

    // overall error message if you have any so if it's unhealthy
    string error_message = 2;
}

// Request to stop all calls of a VTSI project, so all listeners and callers
message StopAllCallsRequest {

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;
}

// Request to transfer calls
message TransferCallRequest{

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // call name to transfer
    // For listener this is <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    // For callers this is <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    string call_name = 2;

    // transfer_id to transfer the call to, so the number or voip number you want to be transferred too
    string transfer_id = 3;

}

// Response to transfer a call to a phone number or voip number
message TransferCallResponse {

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // call name to transfer
    // For listener this is <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    // For callers this is <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    string call_name = 2;

    // transfer id to transfer the calls to, so the phone number or voip number you want to be transferred too
    string transfer_id = 3;

    // error message if you have any so if it's unhealthy
    string error_message = 4;

}

// Request to transfer multiple calls
message TransferCallsRequest{

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // Responses to transfer multiple calls to a phone number or voip number
    repeated TransferCallRequest transfer_call_requests = 2;

}

// Response to transfer a call to a phone number or voip number
message TransferCallsResponse {

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    repeated TransferCallResponse transfer_call_responses = 2;

    // overall error message if you have any so if it's unhealthy
    string error_message = 3;

}

// request to get a call instance's call logs
message GetCallRequest {

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // call name
    // For listener this is <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    // For callers this is <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    string call_name = 2;

    // you can specify the view to be shallow or full .. see above for more info
    optional CallView call_view = 3;
}

// Call view options
enum CallView {

    // Gives only minimum info about the call
    MINIMUM = 0;

    // Gives further basic info like call name, start_time, end_time, current sip status
    SHALLOW = 1;

    // Gives you the full info with status history and the services statuses
    FULL = 2;
}


// CallType
enum CallType {

    // both listeners and callers
    BOTH = 0;

    // listeners
    LISTENER = 1;

    // caller
    CALLER = 2;

    // scheduled caller
    SCHEDULED_CALLER = 3;
}

// Call
message Call {

    // call name
    // For listener this is <pre><code>projects/&lt;project_uuid&gt;/listeners/&lt;listener_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    // For callers this is <pre><code>projects/&lt;project_uuid&gt;/callers/&lt;caller_uuid&gt;/calls/&lt;call_uuid&gt;</code></pre>
    string name = 1;

    // sip account used
    string sip_account = 2;

    // container name which you get from docker ps
    string container_name = 3;

    // Listener or caller enum .. if not specified
    CallType call_type = 4;

    // callee voip id or callee phone number
    string phone_number = 5;

    // start time of log
    google.protobuf.Timestamp start_time = 6;

    // end time of log
    google.protobuf.Timestamp end_time = 7;

    // current sip status type
    ondewo.sip.SipStatus.StatusType sip_status_type = 8;

    // current sip status
    optional ondewo.sip.SipStatus sip_status = 9;

    // sip status history
    optional ondewo.sip.SipStatusHistoryResponse sip_status_history = 10;

    // All container health statuses
    optional AllServicesStatuses services_statuses = 11;

    // Is a call active or not
    bool active = 12;

    // VTSI project name which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 13;

    // Detailed configuration of the services used for the call such as S2T, T2S, NLU, SIP and CSI
    optional CommonServicesConfig common_services_config = 14;

    // SIP port of the call
    optional int32 sip_port = 15;

    // CSI port of the call
    optional int32 csi_port = 16;

    // NLU session name
    optional string nlu_session_name = 17;

    // Messages for each of the Intent.Message.Platform were sent to the user
    optional Intent.Message.Platform platforms = 18;

}

// Definition of a CallFilter, representing filters for querying calls.

message CallFilter {

    // Optional: Filter by call names.
    repeated string call_names = 1;

    // Optional: Filter by NLU session names.
    repeated string nlu_session_names = 2;

    // Optional: Filter by SIP accounts.
    repeated string sip_accounts = 3;

    // Optional: Filter by phone numbers.
    repeated string phone_numbers = 4;

    // Optional: Filter by container names.
    repeated string container_names = 5;

    // Optional: Filter by SIP ports.
    repeated string sip_ports = 6;

    // Optional: Filter by CSI ports.
    repeated string csi_ports = 7;

    // Optional: Filter by call types (both by default, or only listeners, or only callers).
    repeated CallType call_types = 8;

    // Optional: Filter based on SIP status types.
    repeated ondewo.sip.SipStatus.StatusType sip_status_types = 9;

    // Optional: Filter based on active or inactive calls.
    optional bool active = 10;

    // Optional: Start time of the log.
    optional google.protobuf.Timestamp start_time = 11;

    // Optional: End time of the log.
    optional google.protobuf.Timestamp end_time = 12;

    // Optional: Match only sessions for which the duration in seconds is larger or equal.
    optional float duration_in_s_min = 13;

    // Optional: Match only calls for which the duration in seconds is smaller or equal.
    optional float duration_in_s_max = 14;

    // Optional: Platform responses sent to the user. Default is text: <code>Platform.PLATFORM_UNSPECIFIED</code>.
    repeated Intent.Message.Platform platforms = 15;

}


// Request to list calls
message ListCallsRequest{

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string vtsi_project_name = 1;

    // you can specify the view to be shallow or full .. see above for more info
    optional CallView call_view = 2;

    // Optional. A filter to narrow the response down to sessions of interest.
    optional CallFilter call_filter = 3;

    // Optional. The next_page_token value returned from a previous list request.
    // Example: "current_index-1--page_size-20"
    optional string page_token = 4;

}

// Response to list all VoipInfos
message ListCallsResponse{

    // VoipInfos
    repeated Call calls = 1;

    // Token to retrieve the next page of results.
    // This field is a string that holds a token for fetching the next page of results.
    // If there are no more results in the list, this field will be empty.
    string next_page_token = 2;

}

// status of ondewo-sip instance
message AllServicesStatuses {

    // health status for sip
    ServiceStatus status_sip = 1;

    // status of the associated asterisk server
    ServiceStatus status_asterisk = 2;

    // status of the nlu instance associated with the call
    ServiceStatus status_nlu = 3;

    // status of the associated speech-to-text service
    ServiceStatus status_stt = 4;

    // status of the associated text-to-speech service
    ServiceStatus status_tts = 5;
}

// status of service
message ServiceStatus {

    // health status
    bool healthy = 1;

    // error messages if you have any so if it's unhealthy
    string error_message = 2;
}
