// Copyright 2021 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.vtsi;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "ondewo/nlu/context.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "ondewo/s2t/speech-to-text.proto";
import "ondewo/t2s/text-to-speech.proto";


// session manager for phone calls
// endpoints of voip server that manages instances of ondewo-sip, which handle individual calls
service VoipSessions {

  ///////////
  // CALLS //
  ///////////

  // start an ondewo-sip listener instance
  rpc StartListener (StartListenerRequest) returns (StartListenerResponse);

  // start an ondewo-sip caller instance
  rpc StartCaller (StartCallerRequest) returns (StartCallerResponse);

  rpc StartScheduledCaller (StartScheduledCallerRequest) returns (StartScheduledCallerResponse);

  // stop/kill an ondewo-sip listener or caller instance
  rpc StopCall (StopCallRequest) returns (StopCallResponse);

  // start multiple ondewo-sip listeners instances
  rpc StartMultipleListeners (StartMultipleListenersRequest) returns (StartMultipleListenersResponse);

  // start multiple ondewo-sip callers instances
  rpc StartMultipleCallers (StartMultipleCallersRequest) returns (StartMultipleCallersResponse);

  // start multiple ondewo-sip callers instances with schedules
  rpc StartMultipleScheduledCallers (StartMultipleScheduledCallersRequest) returns (StartMultipleScheduledCallersResponse);

  // Transfer a call from a listener to another number
  rpc TransferCall (TransferCallRequest) returns (TransferCallResponse);

  // ConferenceCall .. to be added in the future
  //rpc ConferenceCall (ConferenceCallRequest) returns (ConferenceCallResponse);

  ////////////
  // STATUS //
  ////////////
  rpc GetStatus (GetVoipStatusRequest) returns (VoipStatus);
  rpc GetAllStasuses (google.protobuf.Empty) returns (ALLVoipStatuses);

}

/////////////
// CALLERS //
/////////////

// base configuration of services (ondewo-cai, text-to-speech, speech-to-text, asterisk)
message BaseConfig{
  // service host IP
  string host = 1;

  // service port
  int32 port = 2;

  // Optional: GRPC cert for the given service
  string grpc_cert = 3;
}

message NLUConfig{
  // Base config
  // Host, Port, and [Optional] GRPC cert
  BaseConfig base_config = 1;

  // language code
  // See [Language Support](https://dialogflow.com/docs/reference/language)
  // for a list of the currently supported language codes.
  string language_code = 2;

  // ondewo-cai project ID with which to perform the call
  string project_id = 3;

  // name of intent to trigger at the start of a call
  string initial_intent = 4;

  // ondewo-cai list of contexts
  repeated ondewo.nlu.Context contexts = 5;
}

message T2SConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseConfig base_config = 1;
  ondewo.t2s.RequestConfig t2s_config = 2;
}

message S2TConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseConfig base_config = 1;
  ondewo.s2t.TranscribeRequestConfig s2t_config = 2;
}

message AsteriskConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseConfig base_config = 1;
}

message ServicesConfigs{
  // Asterisk service configuration
  AsteriskConfig asterisk_config = 1;

  // ondewo-cai configuration
  NLUConfig cai_config = 2;

  // speech-to-text service configuration
  S2TConfig stt_config = 3;

  // text-to-speech service configuration
  T2SConfig tts_config = 4;
}

// The base config is for both the listener and caller .. If you only provide it you will get a listener
// You will need to provide SIPCallerConfig for the caller
message SIPBaseConfig{
  // uuid of the call instance
  string call_id = 1;

  // version of sip to use for call
  string sip_sim_version = 2;

  // you either use sip_name for an exact sip instance .. or sip_prefix to get one or instances matched

  // prefix of sip name and sip container name
  string sip_prefix = 3;

  // name of the sip instance which is in Asterisk
  string sip_name = 4;

  // password dictionary is passed depending on the account info you have in asterisk's sip.conf
  // dictionary of sip passwords that are in Asterisk
  map<string, string> password_dictionary = 5;
}

message SIPCallerConfig{
  SIPBaseConfig sip_base_config = 1;
  // phone number to call
  string phone_number = 2;

  // dictionary of sip headers that are sent on call
  map<string, string> headers = 3;
}

// request for starting a listener
message StartListenerRequest {

  // SIP service configuration
  SIPBaseConfig sip_config = 1 ;

  // Service Configs of Asterisk, cai,stt, tts
  ServicesConfigs servies_configs = 2;
}

// response from the voip manager concerning the started listener
message StartListenerResponse {
  // request sent to the voip manager
  StartListenerRequest request = 1;
  // success status
  bool success = 2;
}

// request for starting a caller
message StartCallerRequest {

  // SIP service configuration
  SIPCallerConfig sip_config = 1 ;

  // Service Configs of Asterisk, cai,stt, tts
  ServicesConfigs servies_configs = 2;
}

// response from the voip manager concerning the started caller
message StartCallerResponse {
  // request sent to the voip manager
  StartCallerRequest request = 1;
  // success status
  bool success = 2;
}


// request for starting a scheduled call
message StartScheduledCallerRequest {
  // Normal start caller request
  StartCallerRequest request = 1;
  // Time you want the call to be scheduled at
  DateTime scheduled_time = 2;
}

// response from the voip manager concerning the scheduled call
message StartScheduledCallerResponse {
  // request sent to the voip manager
  StartScheduledCallerRequest request = 1;
  // success status
  bool success = 2;
}

// collection of listeners to start
message StartMultipleListenersRequest {
  repeated StartListenerRequest requests = 1;
}

// response from the voip manager concerning the multiple started listeners
message StartMultipleListenersResponse {
  // request sent to the voip manager
  StartMultipleListenersRequest request = 1;
  // success status - refers to general success: False if at least one call-deployment fails,
  // True if all call were successful
  bool success = 2;
}

// collection of callers to start
message StartMultipleCallersRequest {
  repeated StartCallerRequest requests = 1;
}

// response from the voip manager concerning the multiple started callers
message StartMultipleCallersResponse {
  // request sent to the voip manager
  StartMultipleCallersRequest request = 1;
  // success status - refers to general success: False if at least one call-deployment fails,
  // True if all call were successful
  bool success = 2;
}

// collection of scheduled callers to start
message StartMultipleScheduledCallersRequest {
  repeated StartScheduledCallerRequest requests = 1;
}

// response from the voip manager concerning the multiple scheduled callers
message StartMultipleScheduledCallersResponse {
  // request sent to the voip manager
  StartMultipleScheduledCallersRequest request = 1;
  // success status - refers to general success: False if at least one call-deployment fails,
  // True if all call were successful
  bool success = 2;
}

// parameters of the call to stop
message StopCallRequest {
  // calls can be stopped with either the call-ID or the ondewo-sip ID
  // The last field you set is the value that is set
  oneof id {
    // ID of the call
    string call_id = 1;

    // ID of the ondewo-sip instance
    string sip_id = 2;
  }
}

// response from the voip manager concerning the stop-call request
message StopCallResponse {
  // request sent to the voip manager
  StopCallRequest request = 1;
  // whether listener was successfully stopped
  bool success = 2;
  // Optional. log message
  string log_message = 3;
}

message TransferCallRequest{
  oneof id {
    // ID of the call
    string call_id = 1;
    // ID of the ondewo-sip instance
    string sip_id = 2;
  }
  // Number you want to be transfered too
  string transfer_id = 3;
}

message TransferCallResponse{
  // request sent to the voip manager
  TransferCallRequest request = 1;
  // whether transfer request was successfully sent
  bool success = 2;
}

////////////
// STATUS //
////////////
message GetVoipStatusRequest {
  // monitoring can be done by call-ID or ondewo-sip ID
  // The last field you set is the value that is set
  oneof id {
    // ID of the call
    string call_id = 1;
    // ID of the ondewo-sip instance
    string sip_id = 2;
  }
}

// status of ondewo-sip instance
message VoipStatus {
  // health status
  bool healthy = 1;

  // last log voip instance
  string last_log = 2;

  // status of the associated asterisk server
  ServiceStatus status_asterisk = 3;

  // status of the cai instance associated with the call
  ServiceStatus status_cai = 4;

  // status of the associated speech-to-text service
  ServiceStatus status_stt = 5;

  // status of the associated text-to-speech service
  ServiceStatus status_tts = 6;

}

message ALLVoipStatuses{
  repeated VoipStatus voip_status = 1;
}

// status of service
message ServiceStatus {
  // health status
  bool healthy = 1;

  // last log entry
  string last_log = 2;
}

// Message for a date time object.
message DateTime {
  message TimeZone {
  }
    // Set only if the offset can be determined. Positive for time ahead of UTC.
    // E.g. For "UTC-9", this value is -540.
    int32 offset_minutes = 1;
}