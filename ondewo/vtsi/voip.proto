// Copyright 2021 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.vtsi;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "ondewo/nlu/context.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "ondewo/s2t/speech-to-text.proto";
import "ondewo/t2s/text-to-speech.proto";
import "ondewo/sip/sip.proto";


// session manager for phone calls.
// endpoints of voip server that manages instances of ondewo-sip, which handle individual calls
service VoipSessions {
  ///////////
  // Projects //
  ///////////

  // Create an NLU project with configs.
  rpc CreateProjectConfigs (CreateProjectConfigsRequest) returns (google.protobuf.Empty);

  // Get an NLU project with configs.
  rpc GetProjectConfigs (GetProjectConfigsRequest) returns (GetProjectConfigsResponse);

  // Update an NLU project with configs.
  rpc UpdateProjectConfigs (UpdateProjectConfigsRequest) returns (google.protobuf.Empty);

  // Delete an NLU project with configs.
  rpc DeleteProjectConfigs (DeleteProjectConfigsRequest) returns (google.protobuf.Empty);


  ///////////
  // Asterisk //
  ///////////

  rpc DeployProject (DeployProjectRequest) returns (google.protobuf.Empty);

  rpc UndeployProject (UndeployProjectRequest) returns (google.protobuf.Empty);

  ///////////
  // CALLS //
  ///////////

  // start multiple ondewo-sip listeners instances for a specific nlu-project.
  rpc StartListeners (StartListenersRequest) returns (StartListenersResponse);

  // start multiple ondewo-sip callers instances for a specific nlu-project.
  rpc StartCallers (StartCallersRequest) returns (StartCallersResponse);

  // start multiple ondewo-sip callers instances with schedules
  rpc StartScheduledCallers (StartScheduledCallersRequest) returns (google.protobuf.Empty);

  // stop/kill a list of ondewo-sip listener or caller instances for a specific nlu-project.
  // "stops both Listener and Caller calls"
  rpc StopCalls (StopCallsRequest) returns (google.protobuf.Empty);

  // stop/kill all ondewo-sip listener or caller instance for a specific nlu-project.
  // "stops all Listener and Caller calls"
  rpc StopAllCalls (StopAllCallsRequest) returns (google.protobuf.Empty);

  // Transfer a call from a listener to another number for a specific nlu-project.
  rpc TransferCall (TransferCallRequest) returns (google.protobuf.Empty);

  // ConferenceCall .. to be added in the future
  //rpc ConferenceCall (ConferenceCallRequest) returns (google.protobuf.Empty);

  ////////////
  // STATUS //
  ////////////

  // get call log for single call instance
  rpc GetVoipCallInfo (GetVoipCallInfoRequest) returns (GetVoipCallInfoResponse);
  // get call log for all call instances
  rpc ListVoipCallInfo (ListVoipCallInfoRequest) returns (ListVoipCallInfoResponse);

  /////////////////////////
  // Retrieving Audio files //
  ////////////////////////////

  // Get a s2t or t2s audio file for this conversation if it exists in Minio
  rpc GetAudioFile (GetAudioFileRequest) returns (GetAudioFileResponse) {};
  // Get The whole conversation in an audio file
  rpc GetFullConversationAudioFile (GetFullConversationAudioFileRequest) returns (GetFullConversationAudioFileResponse) {};
}



///////////
// Projects //
///////////

message ProjectConfigs{
  // The maximum number of callers that this project can have.
  int32 max_callers = 1;
  // The maximum number of listeners that this project can have.
  int32 max_listeners = 2;
  // Configs to start the asterisk server.
  AsteriskConfigs asterisk_configs = 3;

}

message AsteriskConfigsVariables{
  // SIP trunk username.
  string sip_trunk_username = 1;
  // SIP trunk password.
  string sip_trunk_password = 2;
  // SIP trunk host.
  string sip_trunk_host = 3;
  // Transfer number.
  string transfer_number = 4;
  // Transfer number host.
  string transfer_number_host = 5;
  // SIP trunk phone number.
  string sip_trunk_phone_number = 6;
}

message AsteriskConfigsFiles{
  // sip.conf file.
  string sip_conf_file_string = 1;
  // extensions.conf file.
  string extensions_conf_file_string = 2;
  // queues.conf file.
  string queues_conf_file_string = 3;
  // modules.conf file.
  string modules_conf_file_string = 4;
}

message AsteriskConfigs{
  oneof asterisk_configs_oneof{
    // Configs as variables which will fill those variables using a blue print.
    AsteriskConfigsVariables asterisk_configs_variables = 1;
    // Configs as files which will set up the configs using those files.
    AsteriskConfigsFiles asterisk_configs_files = 2;
    // Configs will be mapped in from a preconfigured asterisk target directory.
    string asterisk_configs_target_directory_name = 3;
  }

  // The port where Asterisk should start. {Optional}
  int32 asterisk_port = 4;
}

message CreateProjectConfigsRequest{
  // Project id of the NLU project.
  string project_id = 1;
  // Project Configs.
  ProjectConfigs project_configs = 2;
}

message GetProjectConfigsRequest{
  // Project id of the NLU project.
  string project_id = 1;
}

message GetProjectConfigsResponse{
  // Project Configs.
  ProjectConfigs project_configs = 1;
  // error messages if there are any.
  string error_messages = 2;
  // The request that was sent.
  GetProjectConfigsRequest request = 3;
}

message UpdateProjectConfigsRequest{
  // Project id of the NLU project.
  string project_id = 1;
  // Project Configs.
  ProjectConfigs project_configs = 2;
}

message DeleteProjectConfigsRequest{
  // Project id of the NLU project.
  string project_id = 1;
}


///////////
// Asterisk //
///////////

message DeployProjectRequest{
  // Project id of the NLU project.
  string project_id = 1;
}
message UndeployProjectRequest{
  // Project id of the NLU project.
  string project_id = 1;
}

/////////////
// CALLERS //
/////////////

// base configuration of services (ondewo-cai, text-to-speech, speech-to-text, asterisk)
message BaseServiceConfig{
  // service host IP
  string host = 1;

  // service port
  int32 port = 2;

  // Optional: GRPC cert for the given service
  string grpc_cert = 3;
}

message Credentials {
  string account_name = 1;
  string password = 2;
}

message NLUConfig{
  // Base config
  // Host, Port, and [Optional] GRPC cert
  BaseServiceConfig base_config = 1;

  oneof authentication {
    Credentials credentials = 2;
    string auth_token = 3;
  }

  // language code
  // See [Language Support](https://dialogflow.com/docs/reference/language)
  // for a list of the currently supported language codes.
  string language_code = 4;

  // name of intent to trigger at the start of a call
  string initial_intent = 5;

  // ondewo-cai list of contexts
  repeated ondewo.nlu.Context contexts = 6;
}

message T2SConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseServiceConfig base_config = 1;
  ondewo.t2s.RequestConfig t2s_config = 2;
}

message S2TConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseServiceConfig base_config = 1;
  ondewo.s2t.TranscribeRequestConfig s2t_config = 2;
}

message AsteriskConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseServiceConfig base_config = 1;
}

// It is common for both listener and caller
message CommonServicesConfigs{
  // Asterisk service configuration
  AsteriskConfig asterisk_config = 1;

  // ondewo-cai configuration
  NLUConfig cai_config = 2;

  // speech-to-text service configuration
  S2TConfig stt_config = 3;

  // text-to-speech service configuration
  T2SConfig tts_config = 4;

  // CSI service configuration
  CsiConfig csi_config = 5;
}

// The base config is for both the listener and caller .. If you only provide it you will get a listener
// You will need to provide SIPCallerConfig for the caller
message SIPBaseConfig{
  // version of sip to use for call
  string sip_sim_version = 1;

}

message SIPCallerConfig{
  SIPBaseConfig sip_base_config = 1;
  // phone number to call
  string phone_number = 2;

  // dictionary of sip headers that are sent on call
  map<string, string> headers = 3;
}


message CsiConfig{
  S2tCallbacks s2t_callbacks = 1;
  NluCallbacks nlu_callbacks = 2;
  T2sCallbacks t2s_callbacks = 3;
  AudioObjectStorageConfig audio_object_store_config = 4;
  MessageBrokerConfig message_broker_config = 5;
  bool activate_control_messages = 6;

}

message AudioObjectStorageConfig{
  bool activate_audio_object_storage = 1;
  AudioObjectStorageServicesActivationConfig audio_object_storage_services_activation_config = 2;
  oneof audio_storage_config{
    MinioConfig minio_config = 3;
  }
}

message AudioObjectStorageServicesActivationConfig{
  bool activate_s2t = 1;
  bool activate_t2s = 2;
}

message MessageBrokerConfig{
  bool activate_message_broker = 1;
  MessageBrokerServicesActivationConfig message_broker_services_activation_config = 2;
  oneof message_broker_config{
    RabbitMqConfig rabbit_mq_config = 3;
  }
}

message MessageBrokerServicesActivationConfig{
  bool activate_s2t = 1;
  bool activate_nlu = 2;
  bool activate_t2s = 3;
  bool activate_sip = 4;
}

message RabbitMqConfig{
  // host where the rabbit mq server runs
  string host = 1;
  // port where the rabbit mq server runs
  string port = 2;
  // port where the rabbit mq server runs
  string port_2 = 3;
  // user of server
  string user = 4;
  // password of server
  string password = 5;
}

message Endpoint{
  string host = 1;
  string port = 2;
}

message MinioConfig{
  // where the minio server runs (host_ip:port)
  Endpoint endpoint = 1;

  // access key of server
  string access_key = 2;
  // secret key of server
  string secret_key = 3;

  // if you need to do a secure connection "ssl"
  bool secure = 4;
  // session_token in case you need secure connection
  string session_token = 5;
}

message S2tCallbacks{
  repeated string pre_s2t_callbacks = 1;
  repeated string post_s2t_callbacks = 2;
}

message NluCallbacks{
  repeated string pre_nlu_callbacks = 1;
  repeated string post_nlu_callbacks = 2;

}

message T2sCallbacks{
  repeated string pre_t2s_callbacks = 1;
  repeated string post_t2s_callbacks = 2;

}

// request for starting a listener
message StartListenerRequest {

  // SIP service configuration
  SIPBaseConfig sip_config = 1;

  // Service Configs of Asterisk, cai,stt, tts
  CommonServicesConfigs services_configs = 2;
}

// request for starting a caller
message StartCallerRequest {

  // SIP service configuration
  SIPCallerConfig sip_config = 1;

  // Service Configs of Asterisk, cai,stt, tts
  CommonServicesConfigs services_configs = 2;
}

// request for starting a scheduled call
message StartScheduledCallerRequest {
  // Normal start caller request
  StartCallerRequest request = 1;
  // Time you want the call to be scheduled at

  google.protobuf.Timestamp scheduled_time = 2; ///////////////////////////////////////////
}

// collection of listeners to start
message StartListenersRequest {
  // ondewo-cai project ID with which to perform the call
  string project_id = 1;
  repeated StartListenerRequest requests = 2;
}

message StartListenersResponse {
  // ondewo-cai project ID.
  string project_id = 1;
  // The call ids that were assigned to each call
  repeated string call_ids = 2;
}

// collection of callers to start
message StartCallersRequest {
  // ondewo-cai project ID with which to perform the call
  string project_id = 1;
  repeated StartCallerRequest requests = 2;
}

message StartCallersResponse {
  // ondewo-cai project ID.
  string project_id = 1;
  // The call ids that were assigned to each call
  repeated string call_ids = 2;
}

// collection of scheduled callers to start
message StartScheduledCallersRequest {
  // ondewo-cai project ID with which to perform the call
  string project_id = 1;
  repeated StartScheduledCallerRequest requests = 2;
}


// parameters of the calls to stop
message StopCallsRequest {
  // ondewo-cai project ID.
  string project_id = 1;
  repeated string call_ids = 2;
}

// parameters of the calls to stop
message StopAllCallsRequest {
  // ondewo-cai project ID.
  string project_id = 1;
}

message TransferCallRequest{
  // ondewo-cai project ID.
  string project_id = 1;
  // call-ID to transfer
  string call_id = 2;
  // Number you want to be transfered too
  string transfer_id = 3;
}


////////////
// STATUS //
////////////

// request to get a call instance's call logs
message GetVoipCallInfoRequest {
  // ondewo-cai project ID.
  string project_id = 1;

  // ID of the call
  string call_id = 2;

  /* you can specify the view to be shallow or full .. see above for more info*/
  VoipCallInfoView voip_call_info_view = 3;
}

enum VoipCallInfoView {
  // Gives you all basic info like call_id, start_time, end_time, current sip status
  Info_VIEW_SHALLOW = 0;

  // Gives you the full info with status history and the services statuses
  Info_VIEW_FULL = 1;
}

// response with call logs
message GetVoipCallInfoResponse {
  VoipCallInfo active_log = 1;

  // logs of calls associated with call instance
  repeated VoipCallInfo done_logs = 2;
}

enum CallType {
  both = 0;

  listener = 1;

  caller = 2;
}

// call log
message VoipCallInfo {
  // id of call instance
  string call_id = 1;

  // sip account used
  string sip_account = 2;

  // container name which you get from docker ps
  string container_name = 3;

  // Listener or caller enum .. if not specified
  CallType call_type = 4;

  string phone_number = 5;

  // start time of log
  double start_time = 6;

  // end time of log
  double end_time = 7;

  // current sip status
  ondewo.sip.SipStatus sip_status = 8;

  // sip status history
  ondewo.sip.SipStatusHistoryResponse sip_status_history = 9;

  // All container health statuses
  AllServicesStatuses services_statuses = 10;
}

message ListVoipCallInfoRequest{
  // ondewo-cai project ID.
  string project_id = 1;

  // you can specify the view to be shallow or full .. see above for more info
  VoipCallInfoView voip_call_info_view = 2;

  // both by default or listener or caller
  CallType call_type = 3;
}

message ListVoipCallInfoResponse{
  repeated VoipCallInfo voip_info = 1;
}

// status of ondewo-sip instance
message AllServicesStatuses {
  // health status for sip
  ServiceStatus status_sip = 1;

  // status of the associated asterisk server
  ServiceStatus status_asterisk = 2;

  // status of the cai instance associated with the call
  ServiceStatus status_cai = 3;

  // status of the associated speech-to-text service
  ServiceStatus status_stt = 4;

  // status of the associated text-to-speech service
  ServiceStatus status_tts = 5;
}

// status of service
message ServiceStatus {
  // health status
  bool healthy = 1;
  // error messages if you have any so if it's unhealthy
  string error_messsages = 2;
}

/////////////////////////
// Retrieving Audio files //
////////////////////////////
message GetAudioFileRequest{
  string bucket_name = 1;
  string object_name = 2;
  // Optional to add if you want to retrieve it from a specific minio server
  MinioConfig minio_config = 3;
}

message GetAudioFileResponse{
  bytes audio = 1;
}

message GetFullConversationAudioFileRequest{
  string bucket_name = 1;
  repeated string object_names = 2;
  // Optional to add if you want to retrieve it from a specific minio server
  MinioConfig minio_config = 3;
}

message GetFullConversationAudioFileResponse{
  bytes audio = 1;
}
