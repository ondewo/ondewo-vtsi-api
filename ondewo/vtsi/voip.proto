// Copyright 2021 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.vtsi;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "ondewo/nlu/context.proto";
import "google/protobuf/struct.proto";
import "ondewo/s2t/speech-to-text.proto";
import "ondewo/t2s/text-to-speech.proto";


// session manager for phone calls
// endpoints of voip server that manages instances of ondewo-sip-sim, which handle individual calls
service VoipSessions {

  ///////////
  // CALLS //
  ///////////

  // start an ondewo-sip-sim instance that listens for calls with the given parameters
  rpc StartCallInstance (StartCallInstanceRequest) returns (StartCallInstanceResponse);

  // stop/kill an ondewo-sip-sim listener instance
  rpc StopCallInstance (StopCallInstanceRequest) returns (StopCallInstanceResponse);

  // start multiple ondewo-sip-sim instances, callers and/or listeners
  rpc StartMultipleCallInstances (StartMultipleCallInstancesRequest) returns (StartMultipleCallInstancesResponse);

  ////////////
  // STATUS //
  ////////////
  rpc GetInstanceStatus (GetVoipStatusRequest) returns (VoipStatus);

  rpc UpdateServicesStatus (UpdateServicesStatusRequest) returns (UpdateServicesStatusResponse);

}

  /////////////
 // CALLERS //
/////////////

// base configuration of services (ondewo-cai, text-to-speech, speech-to-text, asterisk)
message BaseConfig{
  // service host IP
  string host = 1;

  // service port
  int32 port = 2;

  // Optional: GRPC cert for the given service
  string grpc_cert = 3;
}

message NLUConfig{
  // Base config
  // Host, Port, and [Optional] GRPC cert
  BaseConfig base_config = 1;

  // language code
  // See [Language Support](https://dialogflow.com/docs/reference/language)
  // for a list of the currently supported language codes.
  string language_code = 2;

  // ondewo-cai project ID with which to perform the call
  string project_id = 3;

  // name of intent to trigger at the start of a call
  string initial_intent = 4;

  // ondewo-cai context information
  repeated ondewo.nlu.Context contexts = 5;
}

message T2SConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseConfig base_config = 1;
  ondewo.t2s.RequestConfig t2s_config = 2;
}

message S2TConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseConfig base_config = 1;
  ondewo.s2t.TranscribeRequestConfig s2t_config = 2;
}

message AsteriskConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseConfig base_config = 1;
}

message SIPConfig{
  // uuid of the call
  string call_id = 1;

  // version of sip-sim to use for call
  string sip_sim_version = 2;

  // phone number to call
  string phone_number = 3;

  // prefix of sip name and sip container name
  string sip_prefix = 4;

  // name of the sip instance
  string sip_name = 5;

  // dictionary of sip passwords
  google.protobuf.Struct password_dictionary = 6;
}

// parameters of a call that is to be performed
// if phone number is attached, a caller instance will be started, otherwise a listener
message StartCallInstanceRequest {

  // SIP service configuration
  SIPConfig sip_config =1 ;

  // Asterisk service configuration
  AsteriskConfig asterisk_config = 2;

  // ondewo-cai configuration
  NLUConfig cai_config = 3;

  // speech-to-text service configuration
  S2TConfig stt_config = 4;

  // text-to-speech service configuration
  T2SConfig tts_config = 5;
}

// response from the voip manager concerning the started call
message StartCallInstanceResponse {
  // request sent to the voip manager
  StartCallInstanceRequest request = 1;
    // success status
  bool success = 2;
}

// collection of calls to start
// if phone number is attached to the given call_id, caller instance will be started, otherwise listener
message StartMultipleCallInstancesRequest {
  repeated StartCallInstanceRequest requests = 1;
}

// response from the voip manager concerning the multiple started calls
message StartMultipleCallInstancesResponse {
  // request sent to the voip manager
  StartMultipleCallInstancesRequest request = 1;
    // success status - refers to general success: False if at least one call-deployment fails,
    // True if all call were successful
  bool success = 2;
}

// parameters of the call to stop
message StopCallInstanceRequest {
  // calls can be stopped with either the call-ID or the ondewo-sip-sim ID
  oneof id {
    // ID of the call
    string call_id = 1;

    // ID of the ondewo-sip-sim instance
    string sip_id = 2;
  }
}

// response from the voip manager concerning the stop-call request
message StopCallInstanceResponse {
  // request sent to the voip manager
  StopCallInstanceRequest request = 1;
  // whether listener was successfully stopped
  bool success = 2;
  // Optional. log message
  string log_message = 3;
}

  ////////////
 // STATUS //
////////////
message GetVoipStatusRequest {
  // monitoring can be done by call-ID or ondewo-sip-sim ID
  oneof id {
    // ID of the call
    string call_id = 1;
    // ID of the ondewo-sip-sim instance
    string sip_id = 2;
  }
}

// status of ondewo-sip-sim instance
message VoipStatus {
  // health status
  bool healthy = 1;

  // last log voip instance
  string last_log = 2;

  // status of the associated asterisk server
  ServiceStatus status_asterisk = 3;

  // status of the cai instance associated with the call
  ServiceStatus status_cai = 4;

  // status of the associated speech-to-text service
  ServiceStatus status_stt = 5;

  // status of the associated text-to-speech service
  ServiceStatus status_tts = 6;

}

// status of ondewo-cai
message ServiceStatus {
  // health status
  bool healthy = 1;

  // last log entry
  string last_log = 2;
}