// Copyright 2021 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.vtsi;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "ondewo/nlu/context.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "ondewo/s2t/speech-to-text.proto";
import "ondewo/t2s/text-to-speech.proto";
import "ondewo/sip/sip.proto";


// session manager for phone calls
// endpoints of voip server that manages instances of ondewo-sip, which handle individual calls
service VoipSessions {

  ///////////
  // CALLS //
  ///////////

  // start multiple ondewo-sip listeners instances
  rpc StartListeners (StartListenersRequest) returns (StartListenersResponse);

  // start multiple ondewo-sip callers instances
  rpc StartCallers (StartCallersRequest) returns (StartCallersResponse);

  // start multiple ondewo-sip callers instances with schedules
  rpc StartScheduledCallers (StartScheduledCallersRequest) returns (StartScheduledCallersResponse);

  // stop/kill an ondewo-sip listener or caller instance
  // "stops both Inbound and Outbound calls"
  rpc StopCall (StopCallRequest) returns (StopCallResponse);

  // stop/kill all ondewo-sip listener or caller instance
  // "stops all Inbound and Outbound calls"
  rpc StopAllCalls (google.protobuf.Empty) returns (StopAllCallsResponse);

  // Transfer a call from a listener to another number
  rpc TransferCall (TransferCallRequest) returns (TransferCallResponse);

  // ConferenceCall .. to be added in the future
  //rpc ConferenceCall (ConferenceCallRequest) returns (ConferenceCallResponse);

  ////////////
  // STATUS //
  ////////////

  // get call log for single call instance
  rpc GetVoipCallInfo (GetVoipCallInfoRequest) returns (GetVoipCallInfoResponse);
  // get call log for all call instances
  rpc ListVoipCallInfo (ListVoipCallInfoRequest) returns (ListVoipCallInfoResponse);

  ////////////
  // Helpers //
  ////////////

  // Gets all the sip accounts that are active
  rpc GetSipAccounts (google.protobuf.Empty) returns (GetSipAccountsResponse);

  // get a call id from a sip account
  rpc GetCallIDsFromSipAccount (GetCallIDsFromSipAccountRequest) returns (GetCallIDsFromSipAccountResponse);
}

/////////////
// CALLERS //
/////////////

// base configuration of services (ondewo-cai, text-to-speech, speech-to-text, asterisk)
message BaseServiceConfig{
  // service host IP
  string host = 1;

  // service port
  int32 port = 2;

  // Optional: GRPC cert for the given service
  string grpc_cert = 3;
}

message Credentials {
  string account_name = 1;
  string password = 2;
}

message NLUConfig{
  // Base config
  // Host, Port, and [Optional] GRPC cert
  BaseServiceConfig base_config = 1;

  oneof authentication {
    Credentials credentials =2;
    string auth_token = 3;
  }

  // language code
  // See [Language Support](https://dialogflow.com/docs/reference/language)
  // for a list of the currently supported language codes.
  string language_code = 4;

  // ondewo-cai project ID with which to perform the call
  string project_id = 5;

  // name of intent to trigger at the start of a call
  string initial_intent = 6;

  // ondewo-cai list of contexts
  repeated ondewo.nlu.Context contexts = 7;
}

message T2SConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseServiceConfig base_config = 1;
  ondewo.t2s.RequestConfig t2s_config = 2;
}

message S2TConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseServiceConfig base_config = 1;
  ondewo.s2t.TranscribeRequestConfig s2t_config = 2;
}

message AsteriskConfig{
  // Host, Port, and [Optional] GRPC cert
  BaseServiceConfig base_config = 1;
}

// It is common for both inbound and outbound / listener and caller
message CommonServicesConfigs{
  // Asterisk service configuration
  AsteriskConfig asterisk_config = 1;

  // ondewo-cai configuration
  NLUConfig cai_config = 2;

  // speech-to-text service configuration
  S2TConfig stt_config = 3;

  // text-to-speech service configuration
  T2SConfig tts_config = 4;
}

// The base config is for both the listener and caller .. If you only provide it you will get a listener
// You will need to provide SIPCallerConfig for the caller
message SIPBaseConfig{
  // uuid of the call instance [optional] .. It's created if not provided
  string call_id = 1;

  // display name (or description) (can be filled with the NLU project name if not provided)
  string call_display_name = 2;

  // version of sip to use for call
  string sip_sim_version = 3;

  // you either use sip_account for an exact sip instance .. or sip_prefix to get one or instances matched
  // prefix of sip name and sip container name
  string sip_prefix = 4;

  // name of the sip instance which is in Asterisk
  string sip_account = 5;

  // password dictionary is passed depending on the account info you have in asterisk's sip.conf
  // dictionary of sip accounts and passwords that are in Asterisk
  map<string, string> account_password_dictionary = 6;
}

message SIPCallerConfig{
  SIPBaseConfig sip_base_config = 1;
  // phone number to call
  string phone_number = 2;

  // dictionary of sip headers that are sent on call
  map<string, string> headers = 3;
}

// request for starting a listener
message StartListenerRequest {

  // SIP service configuration
  SIPBaseConfig sip_config = 1;

  // Service Configs of Asterisk, cai,stt, tts
  CommonServicesConfigs services_configs = 2;
}

// response from the voip manager concerning the started listener
message StartListenerResponse {
  // request sent to the voip manager
  StartListenerRequest request = 1;

  // success status
  bool success = 2;

  // error messages if there are any
  string error_messages = 3;
}

// request for starting a caller
message StartCallerRequest {

  // SIP service configuration
  SIPCallerConfig sip_config = 1;

  // Service Configs of Asterisk, cai,stt, tts
  CommonServicesConfigs services_configs = 2;
}

// response from the voip manager concerning the started caller
message StartCallerResponse {
  // request sent to the voip manager
  StartCallerRequest request = 1;

  // success status
  bool success = 2;

  // error messages if there are any
  string error_messages = 3;
}


// request for starting a scheduled call
message StartScheduledCallerRequest {
  // Normal start caller request
  StartCallerRequest request = 1;
  // Time you want the call to be scheduled at

  google.protobuf.Timestamp scheduled_time = 2; ///////////////////////////////////////////
}

// response from the voip manager concerning the scheduled call
message StartScheduledCallerResponse {
  // request sent to the voip manager
  StartScheduledCallerRequest request = 1;

  // success status
  bool success = 2;

  // error messages if there are any
  string error_messages = 3;
}

// collection of listeners to start
message StartListenersRequest {
  repeated StartListenerRequest requests = 1;
}

// response from the voip manager concerning the multiple started listeners
message StartListenersResponse {
  // request sent to the voip manager
  StartListenersRequest request = 1;
  // success status - refers to general success: False if at least one call-deployment fails,

  // True if all call were successful
  bool success = 2;

  // error messages if there are any
  string error_messages = 3;
}

// collection of callers to start
message StartCallersRequest {
  repeated StartCallerRequest requests = 1;
}

// response from the voip manager concerning the multiple started callers
message StartCallersResponse {
  // request sent to the voip manager
  StartCallersRequest request = 1;
  // success status - refers to general success: False if at least one call-deployment fails,

  // True if all call were successful
  bool success = 2;

  // error messages if there are any
  string error_messages = 3;
}

// collection of scheduled callers to start
message StartScheduledCallersRequest {
  repeated StartScheduledCallerRequest requests = 1;
}

// response from the voip manager concerning the multiple scheduled callers
message StartScheduledCallersResponse {
  // request sent to the voip manager
  StartScheduledCallersRequest request = 1;
  // success status - refers to general success: False if at least one call-deployment fails,

  // True if all call were successful
  bool success = 2;

  // error messages if there are any
  string error_messages = 3;
}

// parameters of the call to stop
message StopCallRequest {
  // calls can be stopped with either the call-ID or the ondewo-sip ID
  // The last field you set is the value that is set
  oneof id {
    // ID of the call
    string call_id = 1;

    // Account of the ondewo-sip instance
    string sip_account = 2;
  }
}

// response from the voip manager concerning the stop-call request
message StopCallResponse {
  // request sent to the voip manager
  StopCallRequest request = 1;

  // whether listener was successfully stopped
  bool success = 2;

  // error messages if there are any
  string error_messages = 3;
  // Optional. log message
  string log_message = 3;
}

message StopAllCallsResponse{
  repeated StopCallResponse stop_call_responses= 1;
}

message TransferCallRequest{
  oneof id {
    // ID of the call
    string call_id = 1;
    // Account of the ondewo-sip instance
    string sip_account = 2;
  }
  // Number you want to be transfered too
  string transfer_id = 3;
}

message TransferCallResponse{
  // request sent to the voip manager
  TransferCallRequest request = 1;

  // whether transfer request was successfully sent
  bool success = 2;

  // error messages if there are any
  string error_messages = 3;
}

////////////
// STATUS //
////////////

// request to get a call instance's call logs
message GetVoipCallInfoRequest {
  // monitoring can be done by call-ID or ondewo-sip ID
  // The last field you set is the value that is set
  oneof id {
    // ID of the call
    string call_id = 1;
    // Account of the ondewo-sip instance
    string sip_account = 2;
  }

  /* you can specify the view to be shallow or full .. see above for more info*/ VoipCallInfoView voip_call_info_view = 3;

  // both by default or inbound or outbound
  CallType call_type = 4;
}

enum VoipCallInfoView {
    // Gives you all basic info like call_id, start_time, end_time, current sip status
    Info_VIEW_SHALLOW = 0;

    // Gives you the full info with status history and the services statuses
    Info_VIEW_FULL = 1;
}

// response with call logs
message GetVoipCallInfoResponse {
  VoipCallInfo active_log = 1;

  // logs of calls associated with call instance
  repeated VoipCallInfo done_logs = 2;
}

enum CallType {
    both = 0;

    inbound = 1;

    outbound = 2;
}

// call log
message VoipCallInfo {
  // id of call instance
  string call_id = 1;

  // sip account used
  string sip_account = 2;

  // display name (or description) (can be filled with the NLU project name if not provided)
  string display_name = 3;

  // container name which you get from docker ps
  string container_name = 4;

  // Inbound or outbound enum .. if not specified
  CallType call_type = 5;

  string phone_number = 6;

  // start time of log
  double start_time = 7;

  // end time of log
  double end_time = 8;

  // current sip status
  ondewo.sip.SipStatus sip_status = 9;

  // sip status history
  ondewo.sip.SipStatusHistoryResponse sip_status_history = 10;

  // All container health statuses
  AllservicesStatuses services_statuses = 11;
}

message ListVoipCallInfoRequest{
  // you can specify the view to be shallow or full .. see above for more info
  VoipCallInfoView voip_call_info_view = 1;

  // both by default or inbound or outbound
  CallType call_type = 2;
}

message ListVoipCallInfoResponse{
  repeated VoipCallInfo voip_info = 1;
}

// status of ondewo-sip instance
message AllservicesStatuses {
  // health status for sip
  ServiceStatus status_sip = 1;

  // status of the associated asterisk server
  ServiceStatus status_asterisk = 2;

  // status of the cai instance associated with the call
  ServiceStatus status_cai = 3;

  // status of the associated speech-to-text service
  ServiceStatus status_stt = 4;

  // status of the associated text-to-speech service
  ServiceStatus status_tts = 5;
}

// status of service
message ServiceStatus {
  // health status
  bool healthy = 1;
  // error messages if you have any so if it's unhealthy
  string error_messsages = 2;
}


  ////////////
  // Helpers //
  ////////////


message GetSipAccountsResponse{
  repeated string asterisk_accounts = 1;
}


message GetCallIDsFromSipAccountRequest{
  repeated string asterisk_account = 1;
}

message GetCallIDsFromSipAccountResponse{
  repeated string call_ids = 1;
}
