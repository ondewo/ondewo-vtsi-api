// Copyright 2021 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.vtsi;
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// ONDEWO VTSI API
service Projects {

    //////////////////////////////////////////////////////////////////////////////
    // Project endpoints
    //////////////////////////////////////////////////////////////////////////////

    // Create a VTSI project with configs
    rpc CreateVtsiProject (CreateVtsiProjectRequest) returns (CreateVtsiProjectResponse);

    // Get a VTSI project with configs
    rpc GetVtsiProject (GetVtsiProjectRequest) returns (VtsiProject);

    // Update a VTSI project with configs
    rpc UpdateVtsiProject (UpdateVtsiProjectRequest) returns (UpdateVtsiProjectResponse);

    // Delete a VTSI project with configs
    rpc DeleteVtsiProject (DeleteVtsiProjectRequest) returns (DeleteVtsiProjectResponse);

    // Deploy a VTSI project
    rpc DeployVtsiProject (DeployVtsiProjectRequest) returns (DeployVtsiProjectResponse);

    // Undeploy a VTSI project
    rpc UndeployVtsiProject (UndeployVtsiProjectRequest) returns (UndeployVtsiProjectResponse);

    // Get a VTSI project with configs
    rpc ListVtsiProjects (ListVtsiProjectsRequest) returns (ListVtsiProjectsResponse);

}



// The VTSI project with its configuration setting
message VtsiProject{

    // Required. The project name. Format: <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    // Only when a new VtsiProject is created the name can be undefined/empty
    string name = 1;

    // OPTIONAL: The display name of the project
    string display_name = 2;

    // The maximum number of callers that this project can have.
    int32 max_callers = 3;

    // The maximum number of listeners that this project can have.
    int32 max_listeners = 4;

    // Configs to start the asterisk server.
    AsteriskConfigs asterisk_configs = 5;

    // The status of the VTSI project.
    VtsiProjectStatus vtsi_project_status = 6;

    // The user who created the vtsi project. Readonly.
    string created_by = 7;

    // Creation time of the vtsi project. Readonly.
    google.protobuf.Timestamp created_at = 8;

    // The user who modified the vtsi project. Readonly.
    string modified_by = 9;

    // Modification time of the vtsi project. Readonly.
    google.protobuf.Timestamp modified_at = 10;

    // The number of active callers in this project.
    int32 active_callers = 11;

    // The number of active listeners in this project.
    int32 active_listeners = 12;

    // The port of the asterisk server
    int32 asterisk_port = 13;

    // associated NLU agents
    // Format: `projects/<Project ID>/agent`.
    repeated string nlu_agent_names = 14;

    // The number of deployed callers in this project.
    int32 deployed_callers = 15;

    // The number of deployed listeners in this project.
    int32 deployed_listeners = 16;

}

// Status of a VtsiProject.
enum VtsiProjectStatus {

    // No status specified
    UNSPECIFIED = 0;

    // Project successfully created and undeployed
    UNDEPLOYED = 1;

    // Project configuration is updating
    UPDATING = 2;

    // Project is deploying
    DEPLOYING = 3;

    // Project is deployed
    DEPLOYED = 4;

    // Project is un-deploying
    UNDEPLOYING = 5;

    // Project is currently deleting
    DELETING = 6;

    // Project is deleted
    DELETED = 7;

}

// Configuration variables for the Asterisk server
message AsteriskConfigsVariables{

    // SIP trunk username.
    string sip_trunk_username = 1;

    // SIP trunk password.
    string sip_trunk_password = 2;

    // SIP trunk host.
    string sip_trunk_host = 3;

    // Transfer number.
    string transfer_number = 4;

    // Transfer number host.
    string transfer_number_host = 5;

    // SIP trunk phone number / caller id.
    string sip_trunk_phone_number = 6;

}

// Configuration files for the Asterisk server
message AsteriskConfigsFiles{

    // sip.conf file as string
    string sip_conf_file_string = 1;

    // extensions.conf file as string
    string extensions_conf_file_string = 2;

    // queues.conf file as string
    string queues_conf_file_string = 3;

    // modules.conf file as string
    string modules_conf_file_string = 4;

}

// Configurations object for the Asterisk server
message AsteriskConfigs{

    oneof asterisk_configs_oneof{

        // Configs as variables which will fill those variables using a blue print.
        AsteriskConfigsVariables asterisk_configs_variables = 1;

        // Configs as files which will set up the configs using those files.
        AsteriskConfigsFiles asterisk_configs_files = 2;

        // Configs will be mapped in from a preconfigured asterisk target directory.
        string asterisk_configs_target_directory_name = 3;
    }

    // OPTIONAL: The port where Asterisk should start.
    int32 asterisk_port = 4;
}

// Request for creating a VTSI project
message CreateVtsiProjectRequest{

    // VTSI project
    // Recommended is to leave "name" empty. The project name here is optional.
    // If no name is given a new parent name is created. The parent has the format:
    // <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>.
    VtsiProject vtsi_project = 1;

    // error message if there are any.
    string error_message = 2;
}

// Response of the create project
message CreateVtsiProjectResponse{

    // Vtsi project
    VtsiProject vtsi_project = 1;

    // error message if there are any.
    string error_message = 2;
}

// Request to retrieve a VTSI project
message GetVtsiProjectRequest{

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string name = 1;

    // Optional. Specify the view of the returned VtsiProject (full view by default)
    VtsiProjectView vtsi_project_view = 2;
}

// Request to get the list of agents
message ListVtsiProjectsRequest {

    // Optional. Specify the view of the returned VtsiProject (full view by default)
    VtsiProjectView vtsi_project_view = 1;

    // Optional. The next_page_token value returned from a previous list request.
    // Example: "current_index-1--page_size-20"
    optional string page_token = 2;

    // Optional. Field to define the sorting of the list of VTSI projects in the response.
    // If not specified, the default behavior is to have no sorting.
    optional VtsiProjectSorting vtsi_project_sorting = 3;

    // Optional. Filter based on associated NLU agents
    // Format: `projects/<Project ID>/agent`.
    repeated string nlu_agent_names = 4;
}

// This is a protobuf message definition for the response of getting a list of VTSI projects.
message ListVtsiProjectsResponse {

    // The list of VTSI projects returned in the response.
    // Use the 'repeated' keyword to indicate that this field can contain multiple instances of VtsiProject.
    repeated VtsiProject vtsi_projects = 1;

    // Token to retrieve the next page of results.
    // This field is a string that holds a token for fetching the next page of results.
    // If there are no more results in the list, this field will be empty.
    string next_page_token = 2;
}

// This protobuf message defines the sorting order for VTSI (Virtual Test System Infrastructure) projects.
message VtsiProjectSorting {

    // Enum to specify the sorting field for VTSI projects.
    enum VtsiProjectSortingField {

        // No sorting
        NO_VTSI_PROJECT_SORTING = 0;

        // Sort by project name such as <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>.
        SORT_VTSI_PROJECT_BY_NAME = 1;

        // Sort by display name
        SORT_VTSI_PROJECT_BY_DISPLAY_NAME = 2;

        // Sort by creation date
        SORT_VTSI_PROJECT_BY_CREATION_DATE = 3;

        // Sort by last modified date
        SORT_VTSI_PROJECT_BY_LAST_MODIFIED = 4;
    }

    // sorting field for vtsi projects sorting
    optional VtsiProjectSortingField sorting_field = 1;

    // Sorting mode
    optional VtsiProjectSortingMode sorting_mode = 2;
}

// Sorting mode
enum VtsiProjectSortingMode {
    // The ascending sorting mode.
    // When sorting using this mode, VtsiProject objects will be arranged
    // in ascending order based on the specified criteria.
    ASCENDING = 0;

    // The descending sorting mode.
    // When sorting using this mode, VtsiProject objects will be arranged
    // in descending order based on the specified criteria.
    DESCENDING = 1;
}

// Structure of VTSI_PROJECT view
// - CreateVTSI_PROJECT: VTSI_PROJECT_VIEW_SHALLOW
// - UpdateVTSI_PROJECT: VTSI_PROJECT_VIEW_SHALLOW
// - GetVTSI_PROJECT: VTSI_PROJECT_VIEW_FULL
// - ListVTSI_PROJECTs: VTSI_PROJECT_VIEW_SHALLOW
enum VtsiProjectView {

    // Unspecified VTSI_PROJECT view: the view is defined by the call:
    VTSI_PROJECT_VIEW_UNSPECIFIED = 0;

    // Full VTSI_PROJECT view: populate all the fields of the VTSI_PROJECT message including configs.
    VTSI_PROJECT_VIEW_FULL = 1;

    // Shallow VTSI_PROJECT view: populates all the fields except configs.
    VTSI_PROJECT_VIEW_SHALLOW = 2;

    // Minimum view including only VTSI_PROJECT UUID and VTSI_PROJECT display name
    VTSI_PROJECT_VIEW_MINIMUM = 3;
}

// Request to updated VTSI project
message UpdateVtsiProjectRequest{

    // Project Configs.
    VtsiProject vtsi_project = 1;
}

// Request to updated VTSI project
message UpdateVtsiProjectResponse{

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string name = 1;

    // error message if there are any.
    string error_message = 2;
}

// Request to delete a VTSI project
// If a deployed VTSI project was deleted then it was undeployed beforehand automatically
message DeleteVtsiProjectRequest{

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string name = 1;
}

// Response to delete a VTSI project
// If a deployed VTSI project was deleted then it was undeployed beforehand automatically
message DeleteVtsiProjectResponse{

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string name = 1;

    // error message if there are any.
    string error_message = 2;
}

// Request to deploy a vtsi project
message DeployVtsiProjectRequest{

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string name = 1;
}

// Response to deploy a vtsi project
message DeployVtsiProjectResponse{

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string name = 1;

    // error message if there are any.
    string error_message = 2;

}

//  Request to undeploy a vtsi project
message UndeployVtsiProjectRequest{

    // Project name of the VTSI project.
    string name = 1;
}

// Response to undeploy a vtsi project
message UndeployVtsiProjectResponse{

    // VTSI project name with which to perform the call of the form <pre><code>projects/&lt;project_uuid&gt;/project</code></pre>
    string name = 1;

    // error message if there are any.
    string error_message = 2;

}
