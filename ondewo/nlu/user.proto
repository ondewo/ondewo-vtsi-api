// Copyright 2020-2023 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.nlu;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "ondewo/nlu/project_role.proto";
import "ondewo/nlu/common.proto";

// gRPC service for managing users and server roles.
service Users {

    // Creates a user.
    rpc CreateUser (CreateUserRequest) returns (User) {
        // HTTP configuration for the CreateUser RPC.
        option (google.api.http) = {
            post: "/v2/users"
            body: "*"
        };
    }

    // Retrieves a user by identifier.
    rpc GetUser (GetUserRequest) returns (User) {
        // HTTP configuration for the GetUser RPC.
        option (google.api.http) = {
            get: "/v2/users/{user_identifier=*}"
        };
    }

    // Retrieves user information by identifier.
    rpc GetUserInfo (GetUserRequest) returns (UserInfo) {
        // HTTP configuration for the GetUserInfo RPC.
        option (google.api.http) = {
            get: "/v2/user_infos/{user_identifier=*}"
        };
    }

    // Deletes a user by identifier.
    rpc DeleteUser (GetUserRequest) returns (google.protobuf.Empty) {
        // HTTP configuration for the DeleteUser RPC.
        option (google.api.http) = {
            delete: "/v2/users/{user_identifier=*}"
        };
    }

    // Updates a user.
    rpc UpdateUser (UpdateUserRequest) returns (User) {
        // HTTP configuration for the UpdateUser RPC.
        option (google.api.http) = {
            patch: "/v2/users"
            body: "*"
        };
    }

    // Lists users.
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
        // HTTP configuration for the ListUsers RPC.
        option (google.api.http) = {
            get: "/v2/users"
        };
    }

    // Lists user information.
    rpc ListUserInfos (ListUsersRequest) returns (ListUserInfosResponse) {
        // HTTP configuration for the ListUserInfos RPC.
        option (google.api.http) = {
            get: "/v2/users_infos"
        };
    }

    // Creates a server role.
    rpc CreateServerRole (CreateServerRoleRequest) returns (ServerRole) {
        // HTTP configuration for the CreateServerRole RPC.
        option (google.api.http) = {
            post: "/v2/server_roles"
            body: "*"
        };
    }

    // Retrieves a server role by ID.
    rpc GetServerRole (GetServerRoleRequest) returns (ServerRole) {
        // HTTP configuration for the GetServerRole RPC.
        option (google.api.http) = {
            get: "/v2/server_roles/{role_id=*}"
        };
    }

    // Deletes a server role by ID.
    rpc DeleteServerRole (DeleteServerRoleRequest) returns (google.protobuf.Empty) {
        // HTTP configuration for the DeleteServerRole RPC.
        option (google.api.http) = {
            delete: "/v2/server_roles/{role_id=*}"
        };
    }

    // Updates a server role.
    rpc UpdateServerRole (UpdateServerRoleRequest) returns (ServerRole) {
        // HTTP configuration for the UpdateServerRole RPC.
        option (google.api.http) = {
            patch: "/v2/server_roles"
            body: "*"
        };
    }

    // Lists server roles.
    rpc ListServerRoles (ListServerRolesRequest) returns (ListServerRolesResponse) {
        // HTTP configuration for the ListServerRoles RPC.
        option (google.api.http) = {
            get: "/v2/server_roles"
        };
    }

    // Lists server permissions.
    rpc ListServerPermissions (ListServerPermissionsRequest) returns (ListServerPermissionsResponse) {
        // HTTP configuration for the ListServerPermissions RPC.
        option (google.api.http) = {
            get: "/v2/server_permissions"
        };
    }

    // Requests login.
    rpc Login (LoginRequest) returns (LoginResponse) {
        // HTTP configuration for the Login RPC.
        option (google.api.http) = {
            post: "/v2/login"
            body: "*"
        };
    }

    // Checks login.
    rpc CheckLogin (google.protobuf.Empty) returns (google.protobuf.Empty) {
        // HTTP configuration for the CheckLogin RPC.
        option (google.api.http) = {
            delete: "/v2/check_login"
        };
    }

    // Lists notifications based on specified filters.
    rpc ListNotifications (ListNotificationsRequest) returns (ListNotificationsResponse);

    // Sets the flagged status for multiple notifications.
    rpc SetNotificationsFlaggedStatus (SetNotificationsFlaggedStatusRequest) returns (ListNotificationsResponse);

    // Sets the read status for multiple notifications.
    rpc SetNotificationsReadStatus (SetNotificationsReadStatusRequest) returns (ListNotificationsResponse);

    // Retrieves user preferences based on the provided request.
    rpc GetUserPreferences (GetUserPreferencesRequest) returns (GetUserPreferencesResponse);

    // Sets or updates user preferences based on the provided request.
    rpc SetUserPreferences (SetUserPreferencesRequest) returns (SetUserPreferencesResponse);

    // Deletes specific user preferences based on the provided request.
    rpc DeleteUserPreferences (DeleteUserPreferencesRequest) returns (DeleteUserPreferencesResponse);

    // Deletes all user preferences for a specific user, optionally filtered by a substring.
    rpc DeleteAllUserPreferences (DeleteAllUserPreferencesRequest) returns (DeleteUserPreferencesResponse);

}

// User messages

// this message contains all the fields that required for user db
message User {

    // when creating user user_id is empty, then it will be generated on creation time on backend
    string user_id = 2;

    // Optional field display_name is the name that will be used on the frontend to interact with the user
    // it shouldn't be unique. If not provided user_name will also be used as display name
    string display_name = 3;

    // server role type of the given user. If nothing is provided, the user is set to USER (minimum access)
    uint32 server_role_id = 6;

    // user e-mail should be a valid e-mail and unique
    string user_email = 7;

    // user profile picture
    bytes user_profile_picture = 8;

    // Creation date and time. Read-only field.
    google.protobuf.Timestamp created_at = 9;

    // Modification date and time. Read-only field.
    google.protobuf.Timestamp modified_at = 10;

    // User id in form of a valid UUID.
    string created_by = 11;

    // User id in form of a valid UUID.
    string modified_by = 12;

}

// This message contains information about user
message UserInfo {

    // user object
    User user = 1;

    // If in GetUser, ListUser requests UserView is FULL, then the mapping is additionally provided
    // of parent of the project and corresponding ProjectRole of the user
    map<string, ProjectRole> project_roles = 2;
}

// Request to create user
message CreateUserRequest {

    // user_id in the User message should be given, if empty will throw an error in the backend
    User user = 1;

    // password
    string password = 3;
}

// Request to update user
message UpdateUserRequest {

    // user_id in the User message should be given, if empty will throw an error in the backend
    // password and other fields in the User are optional. Only the fields to be updated should be provided
    User user = 1;

    // Password of the user
    string password = 4;

    // Optional. The mask to control which fields get updated.
    google.protobuf.FieldMask update_mask = 5;
}

// Request to get user
message GetUserRequest {

    oneof user_identifier {

        // the user is identified by user id
        string user_id = 1;

        // the user can identified by their email
        string user_email = 3;
    }
}

// Request to delete user
message DeleteUserRequest {

    //user is identified by user id, if empty will throw an error in the backend
    string user_id = 1;
}

// Request to list user
message ListUsersRequest {

    // Optional: The page token to support pagination.
    // Pagination allows you to retrieve a large result set in smaller, more manageable portions.
    // The page token is a string representing the current index and page size.
    //
    // Valid page token strings:
    // * "" (empty string) - Retrieves the first page.
    // * "current_index-0--page_size-20" - Retrieves the first page with a page size of 20.
    // * "current_index-1--page_size-20" - Retrieves the second page with a page size of 20.
    //
    // Index starts at 0.
    //
    // Examples of valid page token strings:
    // * ""
    // * "current_index-0--page_size-20"
    // * "current_index-1--page_size-20"
    // * "current_index-10--page_size-20"
    //
    // Examples of invalid page token strings:
    // * "1"
    // * "current_index-0--page_size-20"
    // * "current_index--1--page_size-20"
    // * "current_index1--page_size-20"
    // * "current_index-1--page_size--20"
    string page_token = 1;
}

// Response containing list of users
message ListUsersResponse {

    // The list of users. There will be a maximum number of items
    // returned based on the page_token field in the request.
    repeated User users = 1;

    // The next_page_token is used to retrieve the next page of a returned result,
    // e.g. next_page_token is current_index-2
    string next_page_token = 2;
}

// Response containing list of users
message ListUserInfosResponse {

    // The list of server roles. There will be a maximum number of items
    // returned based on the page_token field in the request.
    repeated UserInfo users = 1;

    // The next_page_token is used to retrieve the next page of a returned result,
    // e.g. next_page_token is current_index-2
    string next_page_token = 2;
}

// Server Role messages
message ServerRole {

    // unique identifier of the role
    uint32 role_id = 1;

    // unique name of the role
    string name = 2;

    // defines the permissions for the given role (the strings can be gotten from the ListServerPermissions)
    repeated string permissions = 3;

    // Creation date and time. Read-only field.
    google.protobuf.Timestamp created_at = 4;

    // Modification date and time. Read-only field.
    google.protobuf.Timestamp modified_at = 5;

    // User id in form of a valid UUID.
    string created_by = 6;

    // User id in form of a valid UUID.
    string modified_by = 7;

}
// Structure of server role
enum DefaultServerRole {

    // unspecified server role
    SERVER_UNSPECIFIED = 0;

    // read-only access
    SERVER_USER = 1;

    // SERVER_USER's permissions + CRUD of projects and Users
    SERVER_MANAGER = 2;

    // this role can do everything
    SERVER_ADMIN = 3;

    // this role can do nothing. Used to set a user as inactive in the server.
    SERVER_INACTIVE = 4;
}

// Request to create server role
message CreateServerRoleRequest {

    //If the role_id is not provided, an incremental value will be assigned
    //The "name" and "role_type" are mandatory values
    //The permissions all default to False if not provided specifically
    ServerRole role = 1;
}

// Request to update server role
message UpdateServerRoleRequest {

    //role_id in the Role message should be given, if empty will throw an error in the backend
    //other fields in the Role are optional. Only the fields to be updated should be provided
    ServerRole role = 1;

    // Optional. The mask to control which fields get updated.
    google.protobuf.FieldMask update_mask = 2;
}

// Request to delete server role
message DeleteServerRoleRequest {

    //role is identified by role id, if empty will throw an error in the backend
    uint32 role_id = 1;
}

// Request to get server role
message GetServerRoleRequest {

    oneof server_role_identifier {
        // role is identified by role id
        uint32 role_id = 1;

        // role can also be uniquely identified by its name
        string role_name = 2;
    }
}

// Request to list server roles
message ListServerRolesRequest {

    // Optional: The page token to support pagination.
    // Pagination allows you to retrieve a large result set in smaller, more manageable portions.
    // The page token is a string representing the current index and page size.
    //
    // Valid page token strings:
    // * "" (empty string) - Retrieves the first page.
    // * "current_index-0--page_size-20" - Retrieves the first page with a page size of 20.
    // * "current_index-1--page_size-20" - Retrieves the second page with a page size of 20.
    //
    // Index starts at 0.
    //
    // Examples of valid page token strings:
    // * ""
    // * "current_index-0--page_size-20"
    // * "current_index-1--page_size-20"
    // * "current_index-10--page_size-20"
    //
    // Examples of invalid page token strings:
    // * "1"
    // * "current_index-0--page_size-20"
    // * "current_index--1--page_size-20"
    // * "current_index1--page_size-20"
    // * "current_index-1--page_size--20"
    string page_token = 1;
}

// Response containing list of server roles
message ListServerRolesResponse {

    // The list of server roles. There will be a maximum number of items
    // returned based on the page_token field in the request.
    repeated ServerRole server_roles = 1;

    // The next_page_token is used to retrieve the next page of a returned result,
    // e.g. next_page_token is current_index-2
    string next_page_token = 2;
}

// Server permissions
message ListServerPermissionsRequest {

    // Optional: The page token to support pagination.
    // Pagination allows you to retrieve a large result set in smaller, more manageable portions.
    // The page token is a string representing the current index and page size.
    //
    // Valid page token strings:
    // * "" (empty string) - Retrieves the first page.
    // * "current_index-0--page_size-20" - Retrieves the first page with a page size of 20.
    // * "current_index-1--page_size-20" - Retrieves the second page with a page size of 20.
    //
    // Index starts at 0.
    //
    // Examples of valid page token strings:
    // * ""
    // * "current_index-0--page_size-20"
    // * "current_index-1--page_size-20"
    // * "current_index-10--page_size-20"
    //
    // Examples of invalid page token strings:
    // * "1"
    // * "current_index-0--page_size-20"
    // * "current_index--1--page_size-20"
    // * "current_index1--page_size-20"
    // * "current_index-1--page_size--20"
    string page_token = 1;
}

// Response containing list of server permissions
message ListServerPermissionsResponse {

    // The list of server permissions. There will be a maximum number of items
    // returned based on the page_token field in the request.
    repeated string permissions = 1;

    // The next_page_token is used to retrieve the next page of a returned result,
    // e.g. next_page_token is current_index-2
    string next_page_token = 2;
}

// Authentication messages
message LoginRequest {

    // user email
    string user_email = 1;

    // user password
    string password = 2;
}

// This message is a response of logging
message LoginResponse {

    // user object - user_id must be there
    User user = 1;

    // authentication token after successful login of the user to access NLU services
    string auth_token = 2;
}

// Request to get user preferences.
message GetUserPreferencesRequest {

    // The name of the user.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agent/users/&lt;user_uuid&gt;</code></pre>
    string user_name = 1;

    // Specific keys to retrieve from user preferences.
    // If keys are specified multiple times then only one KeyValue pair is returned
    repeated string keys = 2;

    // Optional: In addition to the keys specified also include all <pre>keys</pre> that match the provided
    // <pre>regex_include</pre> regular expression.
    // If user does not add regex_filter, then only the keys specified in the keys field are returned.
    // If both, a key in the keys field and in the regex_include will be matched than only a single
    // <pre>KeyValuePair</pre> is returned.
    string regex_include = 3;

}

// Response containing user preferences.
message GetUserPreferencesResponse {

    // The name of the user.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agent/users/&lt;user_uuid&gt;</code></pre>
    string user_name = 1;

    // List of key-value pairs representing user preferences.
    repeated KeyValuePair key_value_pairs = 2;

    // error message if there are any.
    string error_message = 3;
}

// Request to set or update user preferences.
message SetUserPreferencesRequest {

    // The name of the user.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agent/users/&lt;user_uuid&gt;</code></pre>
    string user_name = 1;

    // List of key-value pairs to set or update.
    repeated KeyValuePair key_value_pairs = 2;

}

// Response to set or update user preferences.
message SetUserPreferencesResponse {

    // The name of the user.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agent/users/&lt;user_uuid&gt;</code></pre>
    string user_name = 1;

    // List of keys to delete from user preferences.
    repeated string keys = 2;

    // error message if there are any.
    string error_message = 3;

}


// Request to delete specific user preferences.
message DeleteUserPreferencesRequest {

    // The name of the user.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agent/users/&lt;user_uuid&gt;</code></pre>
    string user_name = 1;

    // List of keys to delete from user preferences.
    repeated string keys = 2;

    // Optional: In addition to the keys specified also include all <pre>keys</pre> that match the provided
    // <pre>regex_include</pre> regular expression.
    // If user does not add regex_filter, then only the keys specified in the keys field are deleted.
    // If both, a key in the keys field and in the regex_include is matched then the key is deleted without raising an error.
    string regex_include = 3;

}

// Response to delete specific user preferences.
message DeleteUserPreferencesResponse {

    // The name of the user.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agent/users/&lt;user_uuid&gt;</code></pre>
    string user_name = 1;

    // List of keys to delete from user preferences.
    repeated string keys = 2;

    // error message if there are any.
    string error_message = 3;

}

// Request to delete all user preferences with an optional filter substring.
message DeleteAllUserPreferencesRequest {

    // The name of the user.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agent/users/&lt;user_uuid&gt;</code></pre>
    string user_name = 1;

    // Optional: Only delete keys that match the provided regular expression.
    // If user does not add regex_filter, then all user preferences will be deleted
    // Example:
    // Only delete keys starting with DE: <code>^DE_</code>
    // Only delete keys matching: <code>.*user.*</code>
    string regex_filter = 2;

}

// Request to list all user preferences for a specific user.
message ListUserPreferencesRequest {

    // The name of the user.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agent/users/&lt;user_uuid&gt;</code></pre>
    string user_name = 1;

    // Optional: Only list keys that match the provided regular expression
    string regex_filter = 2;
}

// Response containing a list of user preferences for a specific user with an optional filter substring.
message ListUserPreferencesResponse {

    // The name of the user.
    string user_name = 1;

    // List of key-value pairs representing user preferences.
    repeated KeyValuePair key_value_pairs = 2;

    // error message if there are any.
    string error_message = 3;

}
