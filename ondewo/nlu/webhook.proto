// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Modifications Copyright 2020-2023 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.nlu;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "ondewo/nlu/entity_type.proto";
import "ondewo/nlu/context.proto";
import "ondewo/nlu/intent.proto";
import "ondewo/nlu/session.proto";

// service to send requests to a webhook server
service Webhook {

    // send a request for /response_refinement/ to the webhook server
    // fulfillment messages can be overwritten by the webhook server
    rpc ResponseRefinement (WebhookRequest) returns (WebhookResponse) {
        option (google.api.http) = {
            post: "/{session=projects/*/agent/sessions/*}:responseRefinement"
            body: "*"
        };
    }

    // send a request for /slot_filling/ to the webhook server
    // parameter values can be provided &
    // context information can be changed by the webhook server
    rpc SlotFilling (WebhookRequest) returns (WebhookResponse) {
        option (google.api.http) = {
            post: "/{session=projects/*/agent/sessions/*}:slotFilling"
            body: "*"
        };
    }

    // send a Ping to the webhook server to verify server health
    // will return True if http status_code==200 is detected in the response
    rpc Ping (PingRequest) returns (PingResponse) {
        option (google.api.http) = {
            get: "/projects/*/agent/webhook:ping"
        };
    }

    // Creates a session entity type.
    //
    // If the specified session entity type already exists, overrides the session
    // entity type.
    //
    // This method doesn't work with Google Assistant integration.
    // Contact Dialogflow support if you need to use session entities
    // with Google Assistant integration.
    rpc CreateSessionEntityType(CreateSessionEntityTypeRequest)
        returns (SessionEntityType);

    // Updates the specified session entity type.
    //
    // This method doesn't work with Google Assistant integration.
    // Contact Dialogflow support if you need to use session entities
    // with Google Assistant integration.
    rpc UpdateSessionEntityType(UpdateSessionEntityTypeRequest)
        returns (SessionEntityType);

    // Deletes the specified session entity type.
    //
    // This method doesn't work with Google Assistant integration.
    // Contact Dialogflow support if you need to use session entities
    // with Google Assistant integration.
    rpc DeleteSessionEntityType(DeleteSessionEntityTypeRequest)
        returns (google.protobuf.Empty);
}

// request sent for webhook ping
message PingRequest {

    // session ID for webhook ping
    string session = 1;
}

// The request message for a webhook call.
message WebhookRequest {


    // The unique identifier of the response. Contains the same value as
    // `[Streaming]DetectIntentResponse.response_id`.
    string response_id = 1;

    // The result of the conversational query or event processing. Contains the
    // same value as `[Streaming]DetectIntentResponse.query_result`.
    QueryResult query_result = 2;

    // Optional. The contents of the original request that was passed to
    // `[Streaming]DetectIntent` call.
    OriginalDetectIntentRequest original_detect_intent_request = 3;

    // The unique identifier of detectIntent request session.
    // Can be used to identify end-user inside webhook implementation.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agent/sessions/&lt;session_uuid&gt;</code></pre>
    string session = 4;

    // Optional. The headers of the request message
    google.protobuf.Struct headers = 5;
}

// The response message for a webhook call.
message WebhookResponse {

    // Optional. The text to be shown on the screen. This value is passed directly
    // to `QueryResult.fulfillment_text`.
    string fulfillment_text = 1;

    // Optional. The collection of rich messages to present to the user. This
    // value is passed directly to `QueryResult.fulfillment_messages`.
    repeated Intent.Message fulfillment_messages = 2;

    // Optional. This value is passed directly to `QueryResult.webhook_source`.
    string source = 3;

    // Optional. This value is passed directly to `QueryResult.webhook_payload`.
    // See the related `fulfillment_messages[i].payload field`, which may be used
    // as an alternative to this field.
    //
    // This field can be used for Actions on Google responses.
    // It should have a structure similar to the JSON message shown here. For more
    // information, see
    // [Actions on Google Webhook
    // Format](https://developers.google.com/actions/dialogflow/webhook)
    // <pre>{
    //   "google": {
    //     "expectUserResponse": true,
    //     "richResponse": {
    //       "items": [
    //         {
    //           "simpleResponse": {
    //             "textToSpeech": "this is a simple response"
    //           }
    //         }
    //       ]
    //     }
    //   }
    // }</pre>
    google.protobuf.Struct payload = 4;

    // Optional. The collection of output contexts. This value is passed directly
    // to `QueryResult.output_contexts`.
    repeated Context output_contexts = 5;

    // Optional. Makes the platform immediately invoke another `DetectIntent` call
    // internally with the specified event as input.
    EventInput followup_event_input = 6;

    // Optional. Additional session entity types to replace or extend developer
    // entity types with. The entity synonyms apply to all languages and persist
    // for the session. Setting this data from a webhook overwrites
    // the session entity types that have been set using `detectIntent` method.
    repeated SessionEntityType session_entity_types = 10;
}

// Represents the contents of the original request that was passed to
// the `[Streaming]DetectIntent` call.
message OriginalDetectIntentRequest {

    // The source of this request, e.g., `google`, `facebook`, `slack` or other "platforms". .
    // Used to identify the "platform"
    string source = 1;

    // Optional. This field is set to the value of the `QueryParameters.payload`
    // field passed in the request. Some integrations that query an
    // agent may provide additional data in the payload.
    //
    // In particular this can be of the form:
    // <pre>{
    //  "a": {
    //    "b": "c"
    //  }
    // }</pre>
    google.protobuf.Struct payload = 3;
}

// This message is a response of pinging
message PingResponse {

    // This is the response message of a Ping request.
    // It's purpose is to report the reachability of a Webhook server.
    bool is_reachable = 1;
}



// A session represents a conversation between a Dialogflow agent and an
// end-user. You can create special entities, called session entities, during a
// session. Session entities can extend or replace custom entity types and only
// exist during the session that they were created for. All session data,
// including session entities, is stored by Dialogflow for 20 minutes.
//
// For more information, see the [session entity
// guide](https://cloud.google.com/dialogflow/docs/entities-session).
message SessionEntityType {

    // The types of modifications for a session entity type.
    enum EntityOverrideMode {
        // Not specified. This value should be never used.
        ENTITY_OVERRIDE_MODE_UNSPECIFIED = 0;

        // The collection of session entities overrides the collection of entities
        // in the corresponding custom entity type.
        ENTITY_OVERRIDE_MODE_OVERRIDE = 1;

        // The collection of session entities extends the collection of entities in
        // the corresponding custom entity type.
        //
        // Note: Even in this override mode calls to `ListSessionEntityTypes`,
        // `GetSessionEntityType`, `CreateSessionEntityType` and
        // `UpdateSessionEntityType` only return the additional entities added in
        // this session entity type. If you want to get the supplemented list,
        // please call
        // [EntityTypes.GetEntityType][google.cloud.dialogflow.v2.EntityTypes.GetEntityType]
        // on the custom entity type and merge.
        ENTITY_OVERRIDE_MODE_SUPPLEMENT = 2;
    }

    // Required. The unique identifier of this session entity type. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type
    // Display Name>`, or `projects/<Project ID>/agent/environments/<Environment
    // ID>/users/<User ID>/sessions/<Session ID>/entityTypes/<Entity Type Display
    // Name>`.
    // If `Environment ID` is not specified, we assume default 'draft'
    // environment. If `User ID` is not specified, we assume default '-' user.
    //
    // `<Entity Type Display Name>` must be the display name of an existing entity
    // type in the same agent that will be overridden or supplemented.
    string name = 1;

    // Required. Indicates whether the additional data should override or
    // supplement the custom entity type definition.
    EntityOverrideMode entity_override_mode = 2;

    // Required. The collection of entities associated with this session entity
    // type.
    repeated EntityType.Entity entities = 3;

}

// The request message for
// [SessionEntityTypes.ListSessionEntityTypes][google.cloud.dialogflow.v2.SessionEntityTypes.ListSessionEntityTypes].
message ListSessionEntityTypesRequest {
    // Required. The session to list all session entity types from.
    // Format: `projects/<Project ID>/agent/sessions/<Session ID>` or
    // `projects/<Project ID>/agent/environments/<Environment ID>/users/<User ID>/
    // sessions/<Session ID>`.
    // If `Environment ID` is not specified, we assume default 'draft'
    // environment. If `User ID` is not specified, we assume default '-' user.
    string parent = 1;

    // Optional. The maximum number of items to return in a single page. By
    // default 100 and at most 1000.
    int32 page_size = 2;

    // Optional: The page token to support pagination.
    // Pagination allows you to retrieve a large result set in smaller, more manageable portions.
    // The page token is a string representing the current index and page size.
    //
    // Valid page token strings:
    // * "" (empty string) - Retrieves the first page.
    // * "current_index-0--page_size-20" - Retrieves the first page with a page size of 20.
    // * "current_index-1--page_size-20" - Retrieves the second page with a page size of 20.
    //
    // Index starts at 0.
    //
    // Examples of valid page token strings:
    // * ""
    // * "current_index-0--page_size-20"
    // * "current_index-1--page_size-20"
    // * "current_index-10--page_size-20"
    //
    // Examples of invalid page token strings:
    // * "1"
    // * "current_index-0--page_size-20"
    // * "current_index--1--page_size-20"
    // * "current_index1--page_size-20"
    // * "current_index-1--page_size--20"
    string page_token = 3;
}

// The response message for
// [SessionEntityTypes.ListSessionEntityTypes][google.cloud.dialogflow.v2.SessionEntityTypes.ListSessionEntityTypes].
message ListSessionEntityTypesResponse {
    // The list of session entity types. There will be a maximum number of items
    // returned based on the page_size field in the request.
    repeated SessionEntityType session_entity_types = 1;

    // Token to retrieve the next page of results, or empty if there are no
    // more results in the list.
    string next_page_token = 2;
}

// The request message for
// [SessionEntityTypes.GetSessionEntityType][google.cloud.dialogflow.v2.SessionEntityTypes.GetSessionEntityType].
message GetSessionEntityTypeRequest {
    // Required. The name of the session entity type. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type
    // Display Name>` or `projects/<Project ID>/agent/environments/<Environment
    // ID>/users/<User ID>/sessions/<Session ID>/entityTypes/<Entity Type Display
    // Name>`.
    // If `Environment ID` is not specified, we assume default 'draft'
    // environment. If `User ID` is not specified, we assume default '-' user.
    string name = 1;
}

// The request message for
// [SessionEntityTypes.CreateSessionEntityType][google.cloud.dialogflow.v2.SessionEntityTypes.CreateSessionEntityType].
message CreateSessionEntityTypeRequest {
    // Required. The agent to list all intents from.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agent</code></pre>
    string parent = 1;

    // Required. The session entity type to create.
    SessionEntityType session_entity_type = 2;

    // Required. The session to create a session entity type for.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agents/sessions/&lt;session_uuid&gt;</code></pre>
    // or
    // <pre><code>projects/&lt;project_uuid&gt;/agents/sessions/&lt;session_uuid&gt;</code></pre>
    // `projects/<Project ID>/agent/environments/<Environment ID>/users/<User ID>/
    // sessions/<Session ID>`.
    // If `Environment ID` is not specified, we assume default 'draft'
    // environment. If `User ID` is not specified, we assume default '-' user.
        // Required. The project that the agent to fetch is associated with.
    // The session to create a session entity type for.
    // Format: <pre><code>projects/&lt;project_uuid&gt;/agents/sessions/&lt;session_uuid&gt;</code></pre>
    string session_id = 3;
}

// The request message for
// [SessionEntityTypes.UpdateSessionEntityType][google.cloud.dialogflow.v2.SessionEntityTypes.UpdateSessionEntityType].
message UpdateSessionEntityTypeRequest {
    // Required. The session entity type to update.
    SessionEntityType session_entity_type = 1;

    // Optional. The mask to control which fields get updated.
    google.protobuf.FieldMask update_mask = 2;

}

// The request message for
// [SessionEntityTypes.DeleteSessionEntityType][google.cloud.dialogflow.v2.SessionEntityTypes.DeleteSessionEntityType].
message DeleteSessionEntityTypeRequest {

    // Required. The name of the entity type to delete. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type
    // Display Name>` or `projects/<Project ID>/agent/environments/<Environment
    // ID>/users/<User ID>/sessions/<Session ID>/entityTypes/<Entity Type Display
    // Name>`.
    // If `Environment ID` is not specified, we assume default 'draft'
    // environment. If `User ID` is not specified, we assume default '-' user.
    string name = 1;
}
